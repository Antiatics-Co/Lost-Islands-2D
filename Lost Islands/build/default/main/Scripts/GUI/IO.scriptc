
ïB
ÏB--@Title Input Ouput
--@Author Aidan Cox
--@_VERSION = 2
--@Description
--	This script handles the saving to and loading from files
-- has a checksum to verify integrity of files



local defsave = require("defsave.defsave")
local md5 = require("main.Scripts.Checksum.md5")

local filename = "save"
local configName = "config.save"

local location = "Default"
local position = vmath.vector3(0, 0, 0)
local items = { 0, 0, 0}
local elements = 1
local health = 100

local easyTable = { location, position, items, elements, health, version = 1 }

local resolution = 1 --just going to have multiple options and give a number depending upon the option
local volume = 100

local config = { volume, resolution, configVersion = 1 }

function generate_checksum(data)
	return md5.sumhexa(data)
end

function file_exists(filename)
	local filepath = sys.get_save_file("LostIslands", filename)
	local file = io.open(filepath, "r")
	if file then
		io.close(file)
		return true
	else
		return false
	end
end

function string_to_table(str)
	local func = load("return " .. str)
	if func then
		return func()
	else
		return nil
	end
end


function table_to_string(tbl)
	if tbl == nil then
		return ""
	end

	local result = ""
	for k, v in pairs(tbl) do
		result = result .. tostring(k) .. value_to_string(v)
	end
	return result
end

function value_to_string(value)
	if type(value) == "table" then
		return table_to_string(value)
	elseif type(value) == "userdata" and vmath.vector3 and vmath.vector3(value) then
		return tostring(value.x) .. tostring(value.y) .. tostring(value.z)
	else
		return tostring(value)
	end
end

function delete_file(filename)
	local filepath = sys.get_save_file("LostIslands", filename)
	local result, err = os.remove(filepath)
	if result then
		print("File deleted successfully.")
	else
		print("Error deleting file:", err)
	end
end

function init(self)
	defsave.appname = "LostIslands"
	print("Type of vmath.vector3:", type(vmath.vector3))

	filename = filename .. ".dat"

	local status, err = pcall(function()
		defsave.load(filename)
	end)

	if not status then
		print("Error loading save file:", err)
		-- Handle the error, e.g., reset to default values
		defsave.set(filename, "default", easyTable)
		defsave.set(filename, "checksum", generate_checksum(table_to_string(easyTable)))
	end

	if file_exists(filename) then
		local loadedChecksum = defsave.get(filename, "checksum")
		local loadedData = defsave.get(filename, "default")
		print("Loaded Data: ", loadedData)
		print("Loaded Checksum: ", loadedChecksum)

		-- Verify the checksum
		if loadedData then
			local current_checksum = generate_checksum(table_to_string(loadedData))
			print("Current Checksum: ", current_checksum)
			
			if current_checksum == loadedChecksum then
				
				print("Data integrity verified.")
				print("easyTable version:", easyTable.version)
				easyTable = loadedData
			else
				
				print("Loaded Data Version", loadedData.version)
				print("loaded easytable Version", easyTable.version)
				print("Data integrity check failed.")
				print("Expected Checksum: ", loadedChecksum)
				print("Actual Checksum: ", current_checksum)
				
				if loadedData.version and loadedData.version > (easyTable.version or 0) then
					print("Data appears to be intentionally updated.")
					easyTable = loadedData
				else
					print("Data corruption detected.")
					msg.post("main#MainMenu", "fileCorruption")
				end
			end
		else
			print("No saved data found.")
			msg.post("main#MainMenu", "fileCorruption")
		end
	else
		print("No save file found.")
		local checksum = generate_checksum(table_to_string(easyTable))
		print("Initial Checksum: ", checksum)

		defsave.set(filename, "default", easyTable)
		defsave.set(filename, "checksum", checksum)
	end

	----------------------------------------------------------------------------------------_G


	local status, err = pcall(function()
		defsave.load(configName)
	end)

	if not status then
		print("Error loading save file:", err)
		-- Handle the error, e.g., reset to default values
		defsave.set(configName, "data", config)
		defsave.set(configName, "checksum", generate_checksum(table_to_string(config)))
	end

	if file_exists(configName) then
		local loadedChecksum = defsave.get(configName, "checksum")
		local loadedData = defsave.get(configName, "data")
		print("Loaded Data: ", loadedData)
		print("Loaded Checksum: ", loadedChecksum)

		-- Verify the checksum
		if loadedData then
			local loadedDataString = table_to_string(loadedData)
			local current_checksum = generate_checksum(loadedDataString)
			print("Current Checksum: ", current_checksum)
			print("Loaded Data String: ", loadedDataString)
			
			if current_checksum == loadedChecksum then
				print("Data integrity verified.")
				config = loadedData
			else
				print("Data integrity check failed.")
				print("Expected Checksum: ", loadedChecksum)
				print("Actual Checksum: ", current_checksum)
				print("Loaded Data Version", loadedData.configVersion)
				print("loaded Config Version", config.configVersion)
				if loadedData.configVersion and loadedData.configVersion > (config.configVersion or 0) then
					print("Data appears to be intentionally updated.")
					config = loadedData
				else
					print("Data corruption detected.")
					local checksum = generate_checksum(table_to_string(config))
					delete_file(configName)  -- Delete the corrupted file
					defsave.set(configName, "data", config)
					defsave.set(configName, "checksum", checksum)
					defsave.save(configName)
				end
			end
		else
			print("No saved data found.")
			local checksum = generate_checksum(table_to_string(config))
			defsave.set(configName, "data", config)
			defsave.set(configName, "checksum", checksum)
			defsave.save(configName)
		end
	else
		print("No save file found.")
		local checksum = generate_checksum(table_to_string(config))
		print("Initial Checksum: ", checksum)

		defsave.set(configName, "data", config)
		defsave.set(configName, "checksum", checksum)
		defsave.save(configName)
	end

	
	-------------------------------------------------------------------------------------------

	defsave.save(filename)
	defsave.save(configName)

	print("Save file created and data saved.")
end

function on_message(self, message_id, message, sender)

	if message_id == hash("reset") then
		local checksum = generate_checksum(table_to_string(easyTable))
		delete_file(filename)  -- Delete the corrupted file
		defsave.set(filename, "default", easyTable)
		defsave.set(filename, "checksum", checksum)
		defsave.save(filename)
	end

	if message_id == hash("configSave") then
		configSave(message.config)
	end
		
	if message_id == hash("save") then
		save(message.data)
	end

	if message_id == hash("load") then
		easyTable = defsave.get(filename, "default")

		local loadedChecksum = defsave.get(filename, "checksum")
		print("Loaded Checksum: ", loadedChecksum)
		msg.post("", "loadPlayerData", {data = easyTable}) --TO DO ***********************************************************
	end

	if message_id == hash("configLoad") then
		config = defsave.get(configName, "data")

		local loadedChecksum = defsave.get(configName, "checksum")
		print("Loaded Checksum: ", loadedChecksum)
		msg.post("main#Settings", "loadedConfig", {data = config})
	end
end


function save(data)
	if data == nil then
		print("Error: data is nil")
		return
	end
	
	print("data table", table_to_string(data))
		
	data.version = (data.version or 0) + 1  -- Increment version
	print("Incremented data Version in Save: ", data.version)

	print("Easy Table", data)

	local new_checksum = generate_checksum(table_to_string(data))
	print("New Checksum: ", new_checksum)
	print("Before saving, version:", data.version)
	defsave.set(filename, "default", data)
	defsave.set(filename, "checksum", generate_checksum(table_to_string(data)))
	print("After saving, version:", data.version)
	
	defsave.save(filename)
	print("Data saved successfully.")
end

function configSave(configData)
	if configData == nil then
		print("Error: config is nil")
		return
	end

	print("data table", table_to_string(configData))
	

	configData.configVersion = (configData.configVersion or 0) + 1  -- Increment version
	print("Incremented Config Version in configSave: ", configData.configVersion)

	local new_checksum = generate_checksum(table_to_string(configData))
	print("New Checksum: ", new_checksum)
	defsave.set(configName, "checksum", new_checksum)
	defsave.set(configName, "data", configData)
	defsave.save(configName)
	print("Config saved successfully.")
end
@main/Scripts/GUI/IO.scriptdefsave.defsavemain.Scripts.Checksum.md5/defsave/defsave.luac/main/Scripts/Checksum/md5.luac" 