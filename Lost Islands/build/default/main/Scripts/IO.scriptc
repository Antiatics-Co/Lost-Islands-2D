
çt
Òs








local defsave = require("defsave.defsave")
local md5 = require("main.Scripts.Checksum.md5")



local filename = "save"
local configName = "config.save"



local fireDungeon = { doors = { 0 }, chestsOpened = {  0 }, bossBeaten = false }
local waterDungeon = { doors = { 0 }, chestsOpened = { 0 }, bossBeaten = false }
local stoneDungeon = { doors = { 0 }, chestsOpened = { 0 }, bossBeaten = false }

local dungeonStatus = { fireDungeon, waterDungeon, stoneDungeon, statusVersion = 1 }



local location = "Default"
local position = vmath.vector3(0, 0, 0)
local energy = 100
local health = 100


local easyTable = { location, position, energy, health, version = 1 }





local EMPTY = 0 
local WOODSWORD = 1
local BROADSWORD = 2
local SPEAR = 3
local BOW = 4



local WOOD = 5
local STEEL = 6
local MAGICSHIELD = 7



local LIGHT = 8
local HEAVY = 9
local MAGIC = 10



local FIRENUM = 11
local WATER = 12
local STONE = 13




local FIREDUNGEONKEYS = { 14, 10 }
local WATERDUNGEONKEYS = { 15, 10 }
local STONEDUNGEONKEYS = { 16, 10 }



local ARROW = { 17, 40 }
local PENDAL = { 18, 100 }

local EMPTYMISC = { 0, 0 }

local items = { empty = EMPTY, woodSword = EMPTY, broadsword = EMPTY, spear = EMPTY, bow = EMPTY, 
				woodShield = EMPTY, steelShiel = EMPTY, magicShield = EMPTY, 
				lightArmour = EMPTY, heavyArmour = EMPTY, magicArmour = EMPTY, fireElement = EMPTY, 
				waterElement = EMPTY, stoneElement = EMPTY, fireDungeonKeys = EMPTYMISC, waterDungeonKeys = EMPTYMISC,
				stoneDungeonKeys = EMPTYMISC, arrow = EMPTYMISC, pendal = EMPTYMISC, itemVersion = 1 } 



local resolution = 1 
local volume = 100

local config = { volume, resolution, configVersion = 1 }



function generate_checksum(data)
	return md5.sumhexa(data)
end

function file_exists(filename)
	local filepath = sys.get_save_file("LostIslands", filename)
	local file = io.open(filepath, "r")
	if file then
		io.close(file)
		return true
	else
		return false
	end
end

function string_to_table(str)
	local func, err = load("return " .. str)
	if func then
		return func()
	else
		print("Error loading string:", err)
		return nil
	end
end

function table_to_string(tbl)
	if tbl == nil then
		return ""
	end

	local result = ""
	local keys = {}
	for k in pairs(tbl) do
		table.insert(keys, k)
	end
	table.sort(keys, function(a, b)
		return tostring(a) < tostring(b)
	end)

	for _, k in ipairs(keys) do
		result = result .. tostring(k) .. "=" .. value_to_string(tbl[k]) .. ";"
	end
	return result
end

function value_to_string(value)
	if type(value) == "table" then
		return table_to_string(value)
	elseif type(value) == "userdata" and getmetatable(value) == getmetatable(vmath.vector3()) then
		return tostring(value.x) .. "," .. tostring(value.y) .. "," .. tostring(value.z)
	else
		return tostring(value)
	end
end



function delete_file(filename)
	local filepath = sys.get_save_file("LostIslands", filename)
	local result, err = os.remove(filepath)
	if result then
		print("File deleted successfully.")
	else
		print("Error deleting file:", err)
	end
end

function init(self)
	defsave.appname = "LostIslands"
	print("Type of vmath.vector3:", type(vmath.vector3))

	filename = filename .. ".dat"

	
	
	local status, err = pcall(function()
		defsave.load(filename)
	end)

	if not status then
		print("Error loading save file:", err)
		
		defsave.set(filename, "default", easyTable)
		defsave.set(filename, "checksumPlayer", generate_checksum(table_to_string(easyTable)))

		defsave.set(filename, "dungeon", dungeonStatus)
		defsave.set(filename, "checksumDungeons", generate_checksum(table_to_string(dungeonStatus)))

		defsave.set(filename, "item", easyTable)
		defsave.set(filename, "checksumItems", generate_checksum(table_to_string(items)))
	end

	if file_exists(filename) then
		local loadedChecksum = defsave.get(filename, "checksumPlayer")
		local loadedData = defsave.get(filename, "default")
		print("Loaded Data: ", loadedData)
		print("Loaded checksumPlayer: ", loadedChecksum)

		
		if loadedData then
			local current_checksum = generate_checksum(table_to_string(loadedData))
			print("Current Checksum: ", current_checksum)
			
			if current_checksum == loadedChecksum then
				
				print("Data integrity verified.")
				print("easyTable version:", easyTable.version)
				easyTable = loadedData
			else
				
				print("Loaded Data Version", loadedData.version)
				print("loaded easytable Version", easyTable.version)
				print("Data integrity check failed.")
				print("Expected Checksum: ", loadedChecksum)
				print("Actual Checksum: ", current_checksum)
				
				if loadedData.version and loadedData.version > (easyTable.version or 0) then
					print("Data appears to be intentionally updated.")
					easyTable = loadedData
				else
					print("Data corruption detected.")
					msg.post("main#MainMenu", "fileCorruption")
				end
			end
		else
			print("No saved data found.")
			msg.post("main#MainMenu", "fileCorruption")
		end
	else
		print("No save file found.")
		local checksum = generate_checksum(table_to_string(easyTable))
		print("Initial Checksum: ", checksum)

		defsave.set(filename, "default", easyTable)
		defsave.set(filename, "checksumPlayer", checksum)
	end

	

	if file_exists(filename) then
		local loadedChecksum = defsave.get(filename, "checksumDungeons")
		local loadedData = defsave.get(filename, "dungeon")
		print("Loaded Data: ", loadedData)
		print("Loaded checksumDungeons: ", loadedChecksum)

		
		if loadedData then
			local current_checksum = generate_checksum(table_to_string(loadedData))
			print("Current Checksum: ", current_checksum)

			if current_checksum == loadedChecksum then

				print("Data integrity verified.")
				print("dungeonStatus version:", dungeonStatus.statusVersion)
				dungeonStatus = loadedData
			else

				print("Loaded Data Version", loadedData.statusVersion)
				print("loaded dungeonStatus Version", dungeonStatus.statusVersion)
				print("Data integrity check failed.")
				print("Expected Checksum: ", loadedChecksum)
				print("Actual Checksum: ", current_checksum)

				if loadedData.statusVersion and loadedData.statusVersion > (dungeonStatus.statusVersion or 0) then
					print("Data appears to be intentionally updated.")
					dungeonStatus = loadedData
				else
					print("Data corruption detected.")
					msg.post("main#MainMenu", "fileCorruption")
				end
			end
		else
			print("No saved data found.")
			msg.post("main#MainMenu", "fileCorruption")
		end
	else
		print("No save file found.")
		local checksum = generate_checksum(table_to_string(dungeonStatus))
		print("Initial Checksum: ", checksum)

		defsave.set(filename, "dungeon", dungeonStatus)
		defsave.set(filename, "checksumDungeons", checksum)
	end

	

	if file_exists(filename) then
		local loadedChecksum = defsave.get(filename, "checksumItems")
		local loadedData = defsave.get(filename, "item")
		print("Loaded Data: ", loadedData)
		print("Loaded checksumItems: ", loadedChecksum)

		
		if loadedData then
			local current_checksum = generate_checksum(table_to_string(loadedData))
			print("Current Checksum: ", current_checksum)

			if current_checksum == loadedChecksum then

				print("Data integrity verified.")
				print("items version:", items.itemVersion)
				items = loadedData
			else

				print("Loaded Data Version", loadedData.itemVersion)
				print("loaded items Version", items.itemVersion)
				print("Data integrity check failed.")
				print("Expected Checksum: ", loadedChecksum)
				print("Actual Checksum: ", current_checksum)

				if loadedData.itemVersion and loadedData.itemVersion > (items.itemVersion or 0) then
					print("Data appears to be intentionally updated.")
					items = loadedData
				else
					print("Data corruption detected.")
					msg.post("main#MainMenu", "fileCorruption")
				end
			end
		else
			print("No saved data found.")
			msg.post("main#MainMenu", "fileCorruption")
		end
	else
		print("No save file found.")
		local checksum = generate_checksum(table_to_string(items))
		print("Initial Checksum: ", checksum)

		defsave.set(filename, "item", items)
		defsave.set(filename, "checksumItems", checksum)
	end

	


	local status, err = pcall(function()
		defsave.load(configName)
	end)

	if not status then
		print("Error loading save file:", err)
		
		defsave.set(configName, "data", config)
		defsave.set(configName, "checksum", generate_checksum(table_to_string(config)))
	end

	if file_exists(configName) then
		local loadedChecksum = defsave.get(configName, "checksum")
		local loadedData = defsave.get(configName, "data")
		print("Loaded Data: ", loadedData)
		print("Loaded Checksum: ", loadedChecksum)

		
		if loadedData then
			local loadedDataString = table_to_string(loadedData)
			local current_checksum = generate_checksum(loadedDataString)
			print("Current Checksum: ", current_checksum)
			print("Loaded Data String: ", loadedDataString)
			
			if current_checksum == loadedChecksum then
				print("Data integrity verified.")
				config = loadedData
			else
				print("Data integrity check failed.")
				print("Expected Checksum: ", loadedChecksum)
				print("Actual Checksum: ", current_checksum)
				print("Loaded Data Version", loadedData.configVersion)
				print("loaded Config Version", config.configVersion)
				if loadedData.configVersion and loadedData.configVersion > (config.configVersion or 0) then
					print("Data appears to be intentionally updated.")
					config = loadedData
				else
					print("Data corruption detected.")
					local checksum = generate_checksum(table_to_string(config))
					delete_file(configName)  
					defsave.set(configName, "data", config)
					defsave.set(configName, "checksum", checksum)
					defsave.save(configName)
				end
			end
		else
			print("No saved data found.")
			local checksum = generate_checksum(table_to_string(config))
			defsave.set(configName, "data", config)
			defsave.set(configName, "checksum", checksum)
			defsave.save(configName)
		end
	else
		print("No save file found.")
		local checksum = generate_checksum(table_to_string(config))
		print("Initial Checksum: ", checksum)

		defsave.set(configName, "data", config)
		defsave.set(configName, "checksum", checksum)
		defsave.save(configName)
	end

	
	

	defsave.save(filename)
	defsave.save(configName)

	print("Save file created and data saved.")
end

function on_message(self, message_id, message, sender)

	if message_id == hash("reset") then
		local checksum = generate_checksum(table_to_string(easyTable))
		delete_file(filename)  
		defsave.set(filename, "default", easyTable)
		defsave.set(filename, "dungeon", dungeonStatus)
		defsave.set(filename, "item", items)
		defsave.set(filename, "checksum", checksum)
		defsave.save(filename)
	end

	if message_id == hash("configSave") then
		configSave(message.config)
	end
		
	if message_id == hash("save") then
		
		print("Received save message")
		print("Player data:", table_to_string(message.data))
		print("Dungeon data:", table_to_string(message.dungeonData))
		print("Item data:", table_to_string(message.itemData))
		
		save(message.data, message.dungeonData, message.itemData)
	end

	if message_id == hash("load") then
		easyTable = defsave.get(filename, "default")
		dungeonStatus = defsave.get(filename, "dungeon")
		items = defsave.get(filename, "item")

		local loadedChecksum = defsave.get(filename, "checksum")
		print("Loaded Checksum: ", loadedChecksum)
		msg.post("", "loadPlayerData", {data = easyTable}) 
		msg.post("", "loadDungeonData", {data = dungeonStatus})
		msg.post("Inventory#inventory", "loadItemData", {data = items})
	end

	if message_id == hash("configLoad") then
		config = defsave.get(configName, "data")

		local loadedChecksum = defsave.get(configName, "checksum")
		print("Loaded Checksum: ", loadedChecksum)
		msg.post("main#Settings", "loadedConfig", {data = config})
	end
end

function save(data, dungeonData, itemData)
	
	
	if data == nil then
		print("Error: data is nil")
		return
	end

	print("data table", table_to_string(data))

	data.version = (data.version or 0) + 1  
	print("Incremented data Version in Save: ", data.version)

	print("Easy Table", data)

	local data_checksum = generate_checksum(table_to_string(data))
	print("New Checksum: ", data_checksum)
	print("Before saving, version:", data.version)
	defsave.set(filename, "default", data)
	defsave.set(filename, "checksum", data_checksum)
	print("After saving, version:", data.version)

	
	if dungeonData == nil then
		print("Error: dungeonData is nil")
		return
	end

	print("dungeonData table", table_to_string(dungeonData))

	dungeonData.statusVersion = (dungeonData.statusVersion or 0) + 1  
	print("Incremented dungeonData Version in Save: ", dungeonData.statusVersion)

	print("Dungeon ", dungeonData)

	local dungeon_checksum = generate_checksum(table_to_string(dungeonData))
	print("New Checksum: ", dungeon_checksum)
	print("Before saving, statusVersion:", dungeonData.statusVersion)
	defsave.set(filename, "dungeon", dungeonData)
	defsave.set(filename, "checksum", dungeon_checksum)
	print("After saving, statusVersion:", dungeonData.statusVersion)    

	

	if itemData == nil then
		print("Error: itemData is nil")
		return
	end

	print("itemData table", table_to_string(itemData))

	itemData.itemVersion = (itemData.itemVersion or 0) + 1  
	print("Incremented itemData Version in Save: ", itemData.itemVersion)

	print("Items ", itemData)

	local item_checksum = generate_checksum(table_to_string(itemData))
	print("New Checksum: ", item_checksum)
	print("Before saving, itemVersion:", itemData.itemVersion)
	defsave.set(filename, "item", itemData)
	defsave.set(filename, "checksum", item_checksum)
	print("After saving, itemVersion:", itemData.itemVersion)

	

	defsave.save(filename)
	print("Data saved successfully.")
end


function configSave(configData)
	if configData == nil then
		print("Error: config is nil")
		return
	end

	print("data table", table_to_string(configData))
	

	configData.configVersion = (configData.configVersion or 0) + 1  
	print("Incremented Config Version in configSave: ", configData.configVersion)

	local new_checksum = generate_checksum(table_to_string(configData))
	print("New Checksum: ", new_checksum)
	defsave.set(configName, "checksum", new_checksum)
	defsave.set(configName, "data", configData)
	defsave.save(configName)
	print("Config saved successfully.")
end
@main/Scripts/IO.scriptdefsave.defsavemain.Scripts.Checksum.md5/defsave/defsave.luac/main/Scripts/Checksum/md5.luac" 