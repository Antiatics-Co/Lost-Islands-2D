--@Title Input Ouput
--@Author Aidan Cox
--@_VERSION = 3
--@Description
--	This script handles the saving to and loading from files
-- has a checksum to verify integrity of files


local itm = require("Modules.items")
local pos = require("Modules.PlayerPosition")
local loc = require("Modules.CollectionTracker") --unneeded getting rid of location tracking
local char = require("Modules.CharacterSprites")
local mob = require("Modules.NPCProperties")
local dun = require("Modules.Dungeons")

local items = { itm.get_itemList() }

-----------------PREHASHES

local RESET = hash("reset")
local CONFIGSAVE = hash("configSave")
local SAVE = hash("save")
local LOAD = hash("load")
local CONFIGLOAD = hash("configLoad")

---------------------------

local defsave = require("defsave.defsave")
local md5 = require("Modules.md5")

------------------------------------Filenames

local filename = "save"
local configName = "config.dat"

------------------------------------Dungeons

local fireDungeon = { doors = {  }, chestsOpened = {  }, bossBeaten = false }
local waterDungeon = { doors = {  }, chestsOpened = {  }, bossBeaten = false }
local stoneDungeon = { doors = {  }, chestsOpened = {  }, bossBeaten = false }

local dungeonStatus = { fireDungeon, waterDungeon, stoneDungeon }

-------------------------------------Location, Energy, and Health Data

local position = vmath.vector3(0, 0, 0)
local energy = 100
local health = 100


local easyTable = { position, energy, health, character = {}, npcStatus = {} }

----------------------------------------------Config

local resolution = 1 --just going to have multiple options and give a number depending upon the option
local volume = 50

local config = { volume, resolution }

---------------------------------------------------------------------------

--[[
local function save_readable_file(name, data)
	-- Specify the full path
	local path = "C:\\Users\\aidco\\AppData\\Roaming\\LostIslands\\" .. name

	local file = io.open(path, "w")
	if file then
		file:write(data)
		file:close()
		print("Data saved to", path)
	else
		print("Error opening file for writing")
	end
end]]

----------------------------------------------------------------------------

local function string_to_table(str)
	local func, err = load("return " .. str)
	if func then
		return func()
	else
		print("Error loading string:", err)
		return nil
	end
end

local function table_to_string(tbl)
	if tbl == nil then
		return ""
	end

	local result = ""
	local keys = {}
	for k in pairs(tbl) do
		table.insert(keys, k)
	end
	table.sort(keys, function(a, b)
		return tostring(a) < tostring(b)
	end)

	for _, k in ipairs(keys) do
		result = result .. tostring(k) .. "=" .. value_to_string(tbl[k]) .. ";"
	end

	--save_readable_file("your_readable_file.txt", result)
	return result
end

local function loadSave()
	--defsave.load(filename)
	easyTable = defsave.get(filename, "player")
	dun.dungeons = defsave.get(filename, "dungeons")
	itm.itemList = defsave.get(filename, "items")
	print("Set Item List")

	--local loadedChecksum = defsave.get(filename, "checksum")
	--print("Loaded Checksum: ", loadedChecksum)

	-- Debug: Print the entire item list
	--local itemList = itm.get_itemList()
	--print("Item List: ", table_to_string(itemList))

	--[[if itemList["woodsword"] then
		if itemList["woodsword"].equipped then
			print("woodsword equipped? " .. tostring(itemList["woodsword"].equipped)) --for testing?
		end
	else
		print("woodsword not found in item list")
	end]]

	pos.setPosition(easyTable.position)
	itm.setHealth(easyTable.health)
	itm.setEnergy(easyTable.energy)
	char.sprite = easyTable.character
	mob.npc = easyTable.npcStatus
	msg.post("map:/Player#Player", "Loaded")
end



local function generate_checksum(data)
	return md5.sumhexa(data)
end

local function file_exists(filename)
	local filepath = sys.get_save_file("LostIslands", filename)
	local file = io.open(filepath, "r")
	if file then
		io.close(file)
		return true
	else
		return false
	end
end

function value_to_string(value)
	if type(value) == "table" then
		return table_to_string(value)
	elseif type(value) == "userdata" and getmetatable(value) == getmetatable(vmath.vector3()) then
		return tostring(value.x) .. "," .. tostring(value.y) .. "," .. tostring(value.z)
	else
		return tostring(value)
	end
end

local function delete_file(name)
	local filepath = sys.get_save_file("LostIslands", name)
	local result, err = os.remove(filepath)
	if result then
		print("File deleted successfully.")
		defsave.load(name)
	else
		print("Error deleting file:", err)
	end
end

function init(self)
	defsave.appname = "LostIslands"
	filename = filename .. ".dat"

	if file_exists(filename) then
		verify_save_data()
	else
		setup_default_save()
	end

	-- Always check and load config
	loadConfig()
	print("Save file verified and config loaded.")
end

function setup_default_save()

	local status, err = pcall(function()
		defsave.load(filename)
	end)
	--setting up default save values
	defsave.set(filename, "player", easyTable)
	defsave.set(filename, "checksumPlayer", generate_checksum(table_to_string(easyTable)))
	defsave.set(filename, "dungeons", dungeonStatus)
	defsave.set(filename, "checksumDungeons", generate_checksum(table_to_string(dungeonStatus)))
	defsave.set(filename, "items", items)
	defsave.set(filename, "checksumItems", generate_checksum(table_to_string(items)))
	defsave.save(filename)
end

function verify_data(dataType)
	local loadedChecksum = defsave.get(filename, "checksum" .. dataType)
	local loadedData = defsave.get(filename, dataType:lower())

	if loadedData then
		local loadedDataString = table_to_string(loadedData)
		local current_checksum = generate_checksum(loadedDataString)

		if current_checksum == loadedChecksum then
			print(dataType .. " checksums match")
			print("loadedChecksum: " .. loadedChecksum)
			print("CurrentChecksum: " .. current_checksum)
			return loadedData
		else
			print("Loaded " .. dataType .. " Data Version", loadedData)
			print("Data integrity check failed.")
			print("Data corruption detected for " .. dataType .. " data.")
			msg.post("main#MainMenu", "fileCorruption")
		end
	else
		print("No saved " .. dataType .. " data found.")
		msg.post("main#MainMenu", "fileCorruption")
	end

	return nil
end

function verify_save_data()
	local status, err = pcall(function()
		defsave.load(filename)
	end)

	if not status then
		print("Error loading save file:", err)
		setup_default_save()
	end

	if file_exists(filename) then
		easyTable = verify_data("Player")
		dungeonStatus = verify_data("Dungeons")
		items = verify_data("Items")
	end	
end


function loadConfig()

	local status, err = pcall(function() --these pcall things may not need to exist test, 
										 --or a new fill exist function should be made with them
		defsave.load(configName)
	end)

	if not status then
		print("Error loading config file:", err)
		setup_default_config()
	end

	if file_exists(configName) then
		local loadedChecksum = defsave.get(configName, "checksum")
		local loadedData = defsave.get(configName, "data")
		print("Loaded Config Data: ", loadedData)
		print("Loaded Config Checksum: ", loadedChecksum)

		if loadedData then
			local loadedDataString = table_to_string(loadedData)
			local current_checksum = generate_checksum(loadedDataString)
			print("Current Config Checksum: ", current_checksum)

			if current_checksum == loadedChecksum then
				print("Config data integrity verified.")
				config = loadedData
			else
				print("Config data integrity check failed.")
				print("Expected Config Checksum: ", loadedChecksum)
				print("Actual Config Checksum: ", current_checksum)
				setup_default_config()
			end
		else
			print("No config data found.")
			setup_default_config()
		end
	else
		print("No config file found.")
		setup_default_config()
	end
end

function setup_default_config()
	-- logic for setting up default configuration values
	local checksum = generate_checksum(table_to_string(config))
	defsave.set(configName, "data", config)
	defsave.set(configName, "checksum", checksum)
	defsave.save();
end


local i = 0

local function save()

	-----------------------Save easyTable---------------------------------
	
	local itemData = itm.get_itemList()
	
	local data = {
		position = pos.getPosition(),
		health = itm.getHealth(),
		energy = itm.getEnergy(),
		character = char.sprite,
		npcStatus = mob.npc }
		
		local dungeonData = dun.dungeons
	
	if i < 1 then
		i = i + 1
		if data == nil then
			print("Error: data is nil")
			return
		end

		print("data table", table_to_string(data))

		--print("Easy Table", data)

		local data_checksum = generate_checksum(table_to_string(data))
		print("New Checksum: ", data_checksum)
		defsave.set(filename, "player", data)
		defsave.set(filename, "checksumPlayer", data_checksum)

		---------------------------------Save Dungeons----------------------------

		if dungeonData == nil then
			print("Error: dungeonData is nil")
			os.exit()
		end



		print("dungeonData table", table_to_string(dungeonData))

		--print("Dungeon ", dungeonData)

		local dungeon_checksum = generate_checksum(table_to_string(dungeonData))
		print("New Checksum: ", dungeon_checksum)

		defsave.set(filename, "dungeons", dungeonData)
		defsave.set(filename, "checksumDungeons", dungeon_checksum)
  

		---------------------------------Save Items----------------------------

		if itemData == nil then
			print("Error: itemData is nil")
			return
		end

		print("itemData table", table_to_string(itemData))




		--print("Items ", itemData)

		local item_checksum = generate_checksum(table_to_string(itemData))
		print("New Checksum: ", item_checksum)

		defsave.set(filename, "items", itemData)
		defsave.set(filename, "checksumItems", item_checksum)


		------------------------------------------------------------------

		defsave.save(filename)
		print("Data saved successfully.")
	end
end


function configSave(configData)
	if configData == nil then
		print("Error: config is nil")
		return
	end

	print("data table", table_to_string(configData))
	

	configData.configVersion = (configData.configVersion or 0) + 1  -- Increment version
	print("Incremented Config Version in configSave: ", configData.configVersion)

	local new_checksum = generate_checksum(table_to_string(configData))
	print("New Checksum: ", new_checksum)
	defsave.set(configName, "checksum", new_checksum)
	defsave.set(configName, "data", configData)
	defsave.save(configName)
	print("Config saved successfully.")
end


function on_message(self, message_id, message, sender)

	if message_id == RESET then
		local checksum = generate_checksum(table_to_string(easyTable))
		delete_file(filename)  -- Delete the corrupted file
		setup_default_save()
	end

	if message_id == CONFIGSAVE then
		configSave(message.config)
	end

	if message_id == SAVE then
		print("I "..i)
		print("Received save message, now saving")
	
		save()
	end

	if message_id == LOAD then
		loadSave()
	end

	if message_id == CONFIGLOAD then
		config = defsave.get(configName, "data")

		local loadedChecksum = defsave.get(configName, "checksum")
		print("Loaded Checksum: ", loadedChecksum)
		msg.post("main#Settings", "loadedConfig", {data = config})
	end
end
