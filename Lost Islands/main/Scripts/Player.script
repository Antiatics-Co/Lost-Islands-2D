--Author(s): Aidan Cox
--Title: player input script
--Version: 1
--Desciption(24/3/2024): this program handlesplayer inputs to allow the player to move horixzontally
--25/3/2024 - added gravity and collision simplified movement
--26/3/2024 - jumping, new animate func
--29/3/2024 - more collisions - fixed gravity debug

local DIRECTIONRIGHT = 1
local DIRECTIONLEFT = -1
local BASEVELOCITY = 500
local GRAVITY = 1200
local JUMPTAKEOFF = 500
local FIREDELAY = 0.5

local lastfired = -1

function init(self) --constructor
	msg.post("#", "acquire_input_focus")  --tell the script to aquie input focus, "#" = this componet / this script, use "." dor object
	msg.post("@render:", "use_camera_projection")
	camera.acquire_focus("operator#camera")
	
	self.velocity = vmath.vector3(0, 0, 0)
	self.groundContact = false
	self.previousGroundContact = false
	self.correction = vmath.vector3(0, 0, 0)
end

function walk(self) -- custom func to handle hori movement
	self.velocity.x = BASEVELOCITY * self.direction
end

function flip(direction)
	sprite.set_hflip("#sprite", direction < 0) --flips sprite horizontally, first file, 2nd true false if they Should be flipped
end

function play_animation(self, newAnimation)
	if self.animation ~= newAnimation then
		sprite.play_flipbook("#sprite", newAnimation) --first is file that controls it, second is name of animation
		self.animation = newAnimation
	end
end

function animate(self)
	if self.groundContact then
		if self.velocity.x == 0 then
			play_animation(self, "idle")
		else 
			play_animation(self, "idle") --idle is stand in for movement animation
		end
	else
		play_animation(self, "idle") -- idle is stand in for jumping animation
	end
end

local function clamp(v, min, max) --works
	if v < min then return min
	elseif v > max then return max
	else return v
	end
end

function fixed_update(self, dt)
	-- Apply gravity if not on the ground
	if not self.groundContact then
		self.velocity.y = self.velocity.y - GRAVITY * dt
		self.velocity.y = clamp(self.velocity.y, -2000, 5000)
	end

	-- Update the player's position
	local pos = go.get_position()
	pos.y = pos.y + self.velocity.y * dt
	go.set_position(pos)

	-- Reset velocity if on the ground
	if self.groundContact then 
		self.velocity.y = 0
	end
	
	self.previousGroundContact = self.groundContact
	
	local position = go.get_position()
	position = position + self.velocity * dt
	go.set_position(position)

	animate(self)

	print("Velocity Y:", self.velocity.y, "Ground Contact:", self.groundContact)
	
	-- Reset horizontal velocity after applying movement
	self.velocity.x = 0
	self.groundContact = false
	self.correction.x = 0
	self.correction.y = 0
end

function handleLevelCollisions(self, normal, distance)

	print("Collision Normal:", normal)
	
	distance = distance * vmath.length(normal) --normal dist compensation

	if distance > 0 then
		--project accumulated correction onto the penetration vector
		local projection = vmath.project(self.correction, normal * distance)
		if projection < 1 then
			local compensation = (distance - distance * projection) * normal
			go.set_position(go.get_position() + compensation) -- apply compensation
			self.correction = self.correction + compensation
		end
	end
	
	local normalLength = vmath.length(normal)

	if normalLength > 0 then
		self.velocity.x = 0
	end

	if math.abs(normal.x) > 0 then
		self.velocity.x = 0
	end

	--on the ground
	if normal.y > 0 then
		if not self.previousGroundContact then
			particlefx.play("#dust")
			--sound.play("#land")
		end
		self.groundContact = true
		self.velocity.y = 0
	end

	--hit the ceiling
	if normal.y < 0 then
		self.velocity.y = 0
	end
end



function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") and
	message.other_group == hash("level") then
		handleLevelCollisions(self, message.normal, message.distance)
	end
end


function on_input(self, action_id, action)

	--[[if action_id ~= hash("up") then
		if action_id ~= hash("down") then
			if action_id ~= hash("touch") then
				self.direction = (action_id == hash("right")) and DIRECTIONRIGHT or DIRECTIONLEFT
				flip(self.direction)
				walk(self)
			else
				timer.delay(1, true, function()
					factory.create("#factory")
				end)
			end
		else
		end
			
	elseif action.pressed and self.groundContact then
		self.velocity.y = JUMPTAKEOFF
		self.groundContact = false
		particlefx.play("#dust")
		--sound.play("#Jumping")
	end]]--

	if action_id == hash("up") and self.groundContact then
		self.velocity.y = JUMPTAKEOFF
		self.groundContact = false
		particlefx.play("#dust")
		--sound.play("#Jumping")
	elseif action_id == hash("down") then
	elseif action_id == hash("touch") and (lastfired == -1 or os.time(os.date("!*t")) - lastfired > FIREDELAY) then
		factory.create("#factory")
		lastfired = os.time(os.date("!*t"))
	elseif action_id == hash("right") or action_id == hash("left") then
		self.direction = (action_id == hash("right")) and DIRECTIONRIGHT or DIRECTIONLEFT
		flip(self.direction)
		walk(self)
	elseif action_id == hash("esc") and action.released then
		msg.post("#collectionproxy", "load")
		msg.post("#collectionproxy", "enable")
		--gui.set_enabled(gui.get_node("pausemenu"), true)
	end
end
