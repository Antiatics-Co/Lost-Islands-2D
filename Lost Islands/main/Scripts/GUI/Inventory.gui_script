--@Title - Inventory
--@Author - Aidan Cox
--@Version - 4
--@Description - The Inventory system

-- these are the item numbers, for use in the inventory

---PREHASHING-------------------------------------------------

local itm = require("main.Scripts.Modules.items")

local LOADITEMDATA =  hash("loadItemData")
local FILESAVE = hash("fileSave")
local ADDITEM = hash("addItem")
local CONSUMEITEM = hash("consumeItem")
local TOUCH = hash("touch")
local BURN = hash("burn")

--------------------------------------------------------------


-- Define items as a global variable
local items = {  
	woodsword = itm.WOODSWORD, broadsword = itm.BROADSWORD, spear = itm.SPEAR, bow = itm.BOW,
	musket = itm.MUSKET, scythe = itm.SCYTHE, sai = itm.SAI, baton = itm.BATON, assault = itm.ASSAULTRIFLE, rocket = itm.ROCKETLAUNCHER,
	crossbow = itm.CROSSBOW, blunderbuss = itm.BLUNDERBUSS, grenade = itm.GRENADE, hammer = itm.BIGHAMMER, knife = itm.KNIFE, rock = itm.ROCK,
	woodShield = itm.WOOD, steelShield = itm.STEEL, magicShield = itm.MAGICSHIELD, 
	lightArmour = itm.LIGHT, heavyArmour = itm.HEAVY, magicArmour = itm.MAGIC, fireElement = itm.FIRE,
	waterElement = itm.WATER, stoneElement = itm.STONE, lightning =  itm.LIGHTNING, ice = itm.ICE, rainbow = itm.RAINBOW,
	poison = itm.POISON, fireDungeonKeys = itm.FIREDUNGEONKEYS, waterDungeonKeys = itm.WATERDUNGEONKEYS,
	stoneDungeonKeys = itm.STONEDUNGEONKEYS, arrow = itm.ARROW, shells = itm.SHELLS, musketBalls = itm.MUSKETBALLS, 
	pendal = itm.PENDAL, itemVersion = 1 
}

print("Items defined:", items)




local function setupInventory() --setds up inventory and applies all properties on startup.

	if items.woodsword.hasItem then
		--set slot with item to exist
		
		if items.woodsword.equipped then
			--highlight slot and apply properties

			
		end
	end

	if items.broadsword.hasItem then
		
		if items.broadsword.equipped then


		end
	end

	if items.spear.hasItem then
		
		if items.spear.equipped then


		end
	end

	if items.bow.hasItem then
		
		if items.bow.equipped then


		end
	end

	if items.musket.hasItem then
		
		if items.musket.equipped then


		end
	end

	if items.scythe.hasItem then
		
		if items.scythe.equipped then


		end
	end

	if items.sai.hasItem then
		
		if items.sai.equipped then


		end
	end

	if items.baton.hasItem then
		
		if items.baton.equipped then


		end
	end

	if items.assault.hasItem then
		
		if items.assault.equipped then


		end
	end

	if items.rocket.hasItem then
		
		if items.rocket.equipped then


		end
	end

	if items.crossbow.hasItem then
		
		if items.crossbow.equipped then


		end
	end


	if items.blunderbuss.hasItem then
		
		if items.blunderbuss.equipped then


		end
	end

	if items.grenade.hasItem then
		
		if items.grenade.equipped then


		end
	end

	if items.hammer.hasItem then
		
		if items.hammer.equipped then


		end
	end

	if items.knife.hasItem then
		
		if items.knife.equipped then


		end
	end

	if items.rock.hasItem then
		
		if items.rock.equipped then


		end
	end

	if items.woodShield.hasItem then
		
		if items.woodShield.equipped then


		end
	end

	if items.steelShield.hasItem then
		
		if items.steelShield.equipped then


		end
	end

	if items.magicShield.hasItem then
		
		if items.magicShield.equipped then


		end
	end

	if items.lightArmour.hasItem then
		
		if items.lightArmour.equipped then


		end
	end

	if items.heavyArmour.hasItem then
		
		if items.heavyArmour.equipped then


		end
	end

	if items.magicArmour.hasItem then
		
		if items.magicArmour.equipped then


		end
	end

	if items.fireElement.hasItem then
		
		if items.fireElement.equipped then


		end
	end

	if items.waterElement.hasItem then
		
		if items.waterElement.equipped then


		end
	end


	if items.stoneElement.hasItem then
		
		if items.stoneElement.equipped then


		end
	end

	if items.lightning.hasItem then
		
		if items.lightning.equipped then


		end
	end

	if items.ice.hasItem then
		
		if items.ice.equipped then


		end
	end

	if items.rainbow.hasItem then
		
		if items.rainbow.equipped then


		end
	end

	if items.poison.hasItem then
		
		if items.poison.equipped then


		end
	end

	if items.fireDungeonKeys.hasItem then
		
		if items.fireDungeonKeys.equipped then


		end
	end

	if items.waterDungeonKeys.hasItem then
		
		if items.waterDungeonKeys.equipped then


		end
	end

	if items.stoneDungeonKeys.hasItem then
		
		if items.stoneDungeonKeys.equipped then


		end
	end

	if items.stoneDungeonKeys.hasItem then
		
		if items.stoneDungeonKeys.equipped then

			
		end
	end

	if items.shells.hasItem then
		
	end

	if items.musketBalls.hasItem then
		
	end
	
	if items.pendal.hasItem then
		
	end
end

local function applyProperties(ID) --applies the properties of a change in 1 item
	--ID = {name, change}?
	
	if ID.change == BURN then
		if ID.name == items.woodsword then
			attack = 0

		else
			defence = 0

		end
	end
end

local function temphandleprop(damage, shield, ID) -- damage and gunk should have its own script, or be handled in player
								--think about map encounters

	if damage.shieldUp then
		math.randomseed(os.time())

		if math.random(1, 100) <= shield.pierce then
			damage.isPierced = true
			damage.shieldUp = false

		end
	end 
end

local function load(currentItems)
	print("Loading Items Initiated")
	items = currentItems
	setupInventory()
end

local function save()
	print("Entered save function")
	-- Check if items is defined and not nil
	if items then
		msg.post("menu#PauseMenu", "itemsReady", {itemData = items})
		print("Save Data Posted From Inventory")
	else
		print("Error: items is nil or not defined")
	end
end


local function addItem(itemNum)
	if itemNum.num > 29 and (items[itemNum.name].holding + itemNum.addNum) < items[itemNum.name].max then
		items[itemNum.name].holding = items[itemNum.name].holding + itemNum.addNum

		setupInventory()

	elseif  items[itemNum.name].hasItem  == false then
		items[itemNum.name].hasItem = true

		setupInventory()		
	else
		print("Exeeds Item limit")
		return
	end
end

local function consumeItem(itemNum)
	if itemNum.num > 29  then
		items[itemNum.name].holding = items[itemNum.name].holding - itemNum.addNum

		setupInventory()

	elseif  items[itemNum.name].hasItem  == true then
		items[itemNum.name].hasItem = false
		if items[itemNum.name].equipped then
			items[itemNum.name].equipped = false
			
			applyProperties(damage, shield, ID)
		end

		setupInventory()		
	else
		print("Doesn't have item")
		return
	end
end


function getShieldProperties(ID) --ID = { num, name, addNum }

	local shield = { defence = 0, pierce = 0, energyUsage = 0 }

	if items.WOOD.equipped then
		shield = { defence = 10, pierce = 35, energyUsage = 0, type = 1 }
	end
end

--the get properties function will be called from setup
local function getWeaponProperties(ID) --ID =  num 
	--deals with sidearms, mainarms, and elements
end

local function getArmourProperties(ID) --ID =  num 

end



function init(self)
	msg.post(".", "acquire_input_focus")
	print("Script initialized")
end

function on_message(self, message_id, message, sender)
	print("Received message:", message_id)
	
	if message_id == FILESAVE then
		print("fileSave Inventory")
		save()
	end

	if message_id == LOADITEMDATA then
		load(message.data)
	end

	if message_id == ADDITEM then
		--ID = { num, name, addNum }
		addItem(message.itemID)
	end

	if message_id == CONSUMEITEM then
		--for items such as arrows or keys that are limited in use
		--also for items that are burnt
		--ID = { num, name, addNum }
		useItem(message.ID)
	end
end

function on_input(self, action_id, action)

	if action_id == TOUCH and action.released then
		local mouse_x = action.x
		local mouse_y = action.y

		for _, slot in ipairs(items) do
			if gui.pick_node(gui.get_node(slot.node), mouse_x, mouse_y) then
				gui.set_color(gui.get_node(slot.node), vmath.vector4(0, 1, 0, 1)) -- Change color to green
				print("Selected item: " .. slot.item)
				break
			end
		end	
	end
end