--@Title - Inventory
--@Author - Aidan Cox
--@Version - 4
--@Description - The Inventory system

-- these are the item numbers, for use in the inventory

---PREHASHING-------------------------------------------------

local itm = require("main.Scripts.Modules.items")
local prop = require("main.Scripts.Modules.ItemProperties")
local collectionTracker = require("main.Scripts.Modules.CollectionTracker")

local LOADITEMDATA =  hash("loadItemData")
local FILESAVE = hash("fileSave")
local ADDITEM = hash("addItem")
local CONSUMEITEM = hash("consumeItem")
local TOUCH = hash("touch")
local OPENINV = hash("openInv")
local E = hash("inventory")
--------------------------------------------------------------

local inPlayer = true
local inWeapons = false
local inArmour = false
local inElements = false
local invopen = false
--------------------------------------------------------------


-- Define items as a global variable
local items = {}

local layers = {
	"_org"
}


print("Items defined:", items)


local function InvItemStatus(ID)
	local node_name = items[ID.name].node
	if type(node_name) ~= "string" then
		print("Error: Invalid node name for", ID.name)
		return
	end

	local node = gui.get_node(node_name)
	if not node then
		print("Error: Node not found for", ID.name)
		return
	end

	if items[ID.name].equipped then
		print("Item Equipped:", ID.name)
		gui.set_color(node, vmath.vector4(0, 1, 0, 1)) -- Change color to green
	else
		print("Item Unequipped:", ID.name)
		gui.set_color(node, vmath.vector4(1, 1, 1, 1)) -- Change color to white
		print("Attempted to set color to white for:", ID.name)
	end

	-- Confirm the color was set
	local current_color = gui.get_color(node)
	print("Current color of", ID.name, ":", current_color)
end


local function setupInventory()
	for name, item in pairs(items) do
		if type(item) == "table" and item.hasItem ~= nil then
			if item.hasItem then
				if item.equipped then
					prop.equip({ name = name, type = item.type, attack = item.attack, combo = item.combo, speed = item.speed })
				end
			end
			InvItemStatus({ name = name }) -- Ensure it gets called for all items
		end
	end
end

--[[local function setupInventory() --setds up inventory and applies all properties on startup.
local item
	if items.woodsword.hasItem then
		--set slot with item to exist
		
		if items.woodsword.equipped then
			--TO DO highlight slot and apply properties
			item = { name = "woodsword", type = "main", attack = 10 }
			prop.equip(item)
			InvItemStatus(item)
		end
	end

	if items.broadsword.hasItem then
		
		if items.broadsword.equipped then
			item = { name = "broadsword", type = "main", attack = 10 }
			prop.equip(item)
			InvItemStatus(item)
		end
	end

	if items.spear.hasItem then
		
		if items.spear.equipped then
			item = ({ name = "spear", type = "main", attack = 10 })
			prop.equip(item)
			InvItemStatus(item)
		end
	end

	if items.bow.hasItem then
		
		if items.bow.equipped then
			item = ({ name = "bow", type = "ranged", attack = 10, speed  = 10 })
			prop.equip(item)
			InvItemStatus(item)
		end
	end

	if items.musket.hasItem then
		item = ({ name = "musket", type = "ranged", attack = 10, speed = 100 })
		if items.musket.equipped then
			prop.equip(item)
		end
		InvItemStatus(item)
	end

	if items.scythe.hasItem then
		item = ({ name = "scythe", type = "main", attack = 10 })
		if items.scythe.equipped then
			prop.equip(item)
		end
		InvItemStatus(item)
	end

	if items.sai.hasItem then
		item = ({ name = "sai", type = "main", attack = 10 })
		if items.sai.equipped then
			prop.equip(item)
		end
		InvItemStatus(item)
	end

	if items.baton.hasItem then
		item = ({ name = "baton", type = "main", attack = 10 })
		if items.baton.equipped then
			prop.equip(item)
		end
		InvItemStatus(item)
	end

	if items.assault.hasItem then
		item = ({ name = "assault", type = "side", attack = 10, combo = 8 })
		if items.assault.equipped then
			prop.equip(item)
		end
		InvItemStatus(item)
	end

	if items.rocket.hasItem then
		item = ({ name = "rocket", type = "side" , attack = 30, combo = 16})
		if items.rocket.equipped then
			prop.equip(item)
		end
		InvItemStatus(item)
	end

	if items.crossbow.hasItem then
		item = ({ name = "crossbow", type = "ranged", attack = 10, speed = 40 })
		if items.crossbow.equipped then
			prop.equip(item)
		end
		InvItemStatus(item)
	end


	if items.blunderbuss.hasItem then
		item = ({ name = "blunderbuss", type = "side", attack = 10, combo = 4 })
		if items.blunderbuss.equipped then
			prop.equip(item)
		end
		InvItemStatus(item)
	end

	if items.grenade.hasItem then
		item = ({ name = "grenade", type = "ranged", attack = 10, speed = 6 })
		if items.grenade.equipped then
			prop.equip(item)
		end
		InvItemStatus(item)
	end

	if items.hammer.hasItem then
		item = ({ name = "hammer", type = "main", attack = 10 })
		if items.hammer.equipped then
			prop.equip(item)
		end
		InvItemStatus(item)
	end

	if items.knife.hasItem then
		item = ({ name = "knife", type = "side", attack = 10, combo = 3 })	
		if items.knife.equipped then
			prop.equip(item)
		end
		InvItemStatus(item)
	end

	if items.rock.hasItem then
		item = ({ name = "rock", type = "main", attack = 10 })
		if items.rock.equipped then
			prop.equip(item)
		end
		InvItemStatus(item)
	end

	if items.woodShield.hasItem then
		item = ({ name = "woodShield", type = "shield" })
		if items.woodShield.equipped then
			prop.equip(item)
		end
		InvItemStatus(item)
	end

	if items.steelShield.hasItem then
		item = ({ name = "steelShield", type = "shield" })
		if items.steelShield.equipped then
			prop.equip(item)
		end
		InvItemStatus(item)
	end

	if items.magicShield.hasItem then
		item = ({ name = "magicShield", type = "shield" })
		if items.magicShield.equipped then
			prop.equip(item)
		end
		InvItemStatus(item)
	end

	if items.lightArmour.hasItem then
		item = ({ name = "lightArmour", type = "armour" })
		if items.lightArmour.equipped then
			prop.equip(item)
		end
		InvItemStatus(item)
	end

	if items.heavyArmour.hasItem then
		item = ({ name = "heavyArmour", type = "armour"})
		if items.heavyArmour.equipped then
			prop.equip(item)
		end
		InvItemStatus(item)
	end

	if items.magicArmour.hasItem then
		item = ({ name = "magicArmour", type = "armour" })
		if items.magicArmour.equipped then
			prop.equip(item)
		end
		InvItemStatus(item)
	end

	if items.fireElement.hasItem then
		item = ({ name = "fireElement", type = "ranged" })
		if items.fireElement.equipped then
			prop.equip(item)
		end
		InvItemStatus(item)
	end

	if items.waterElement.hasItem then
		item = ({ name = "waterElement", type = "ranged" })
		if items.waterElement.equipped then
			prop.equip(item)
		end
		InvItemStatus(item)
	end


	if items.stoneElement.hasItem then
		item = ({ name = "stoneElement", type = "ranged" })
		if items.stoneElement.equipped then
			prop.equip(item)
		end
		InvItemStatus(item)
	end

	if items.lightning.hasItem then
		item = ({ name = "lightning", type = "ranged" })
		if items.lightning.equipped then
			prop.equip(item)
		end
		InvItemStatus(item)
	end

	if items.ice.hasItem then
		item = ({ name = "ice", type = "ranged" })
		if items.ice.equipped then
			prop.equip(item)
		end
		InvItemStatus(item)
	end

	if items.rainbow.hasItem then
		item = ({ name = "rainbow", type = "ranged" })
		if items.rainbow.equipped then
			prop.equip(item)
		end
		InvItemStatus(item)
	end

	if items.poison.hasItem then
		item = ({ name = "poison", type = "ranged" })
		if items.poison.equipped then
			prop.equip(item)
		end
		InvItemStatus(item)
	end

	if items.fireDungeonKeys.hasItem then  --keys may not call equip item finc
		--Texture will change indicating the key will only work in that temple,
		--while in main they won't appear in inv
		
		if items.fireDungeonKeys.equipped then
			

		end
	end

	if items.waterDungeonKeys.hasItem then
		
		if items.waterDungeonKeys.equipped then
			

		end
	end

	if items.stoneDungeonKeys.hasItem then
		
		if items.stoneDungeonKeys.equipped then
			

		end
	end

	if items.shells.hasItem then
		
	end

	if items.musketBalls.hasItem then
		
	end
	
	if items.pendal.hasItem then
		
	end
end]]



local function load()
	print("Loading Items Initiated")
	items = itm.get_itemList()
	setupInventory()
end

local function save()
	print("Entered save function")
	-- Check if items is defined and not nil

	if items then
		itm.set_itemList(items)
		print("Set Item List")
		msg.post("menu#PauseMenu", "itemsReady")
		print("Save Data Posted From Inventory")
	else
		print("Error: items is nil or not defined")
	end
end

local function addItem(itemNum) --itemNum = {name, num} 
	if itemNum.num > 29 and (items[itemNum.name].holding + itemNum.addNum) < items[itemNum.name].max then
		items[itemNum.name].holding = items[itemNum.name].holding + itemNum.addNum

		setupInventory()

	elseif  items[itemNum.name].hasItem  == false then
		items[itemNum.name].hasItem = true

		setupInventory()		
	else
		print("Exeeds Item limit")
		return
	end
end

local function consumeItem(itemNum)
	if itemNum.num > 29  then
		items[itemNum.name].holding = items[itemNum.name].holding - itemNum.addNum

		setupInventory()

	elseif  items[itemNum.name].hasItem  == true then
		items[itemNum.name].hasItem = false
		if items[itemNum.name].equipped then
			items[itemNum.name].equipped = false
			
			
		end

		setupInventory()		
	else
		print("Doesn't have item")
		return
	end
end

local function unequipItem(ID)
	if items[ID.name].equipped then
		items[ID.name].equipped = false

		--TODO aet item to be shown as unequipped in menu
	end
end

local function disableLayer(prefix)
	for _, node_prefix in ipairs(layers) do
		if string.sub(node_prefix, 1, string.len(prefix)) == prefix then
			local node = gui.get_node(node_prefix)
			gui.set_enabled(node, false)
		end
	end
end

local function enableLayer(prefix)
	for _, node_prefix in ipairs(layers) do
		if string.sub(node_prefix, 1, string.len(prefix)) == prefix then
			local node = gui.get_node(node_prefix)
			gui.set_enabled(node, true)
		end
	end
end


function init(self)
	msg.post(".", "acquire_input_focus")
	print("Script initialized")
	disableLayer("org_")
	--setupInventory()
end

function on_message(self, message_id, message, sender)
	print("Received message:", message_id)
	
	if message_id == FILESAVE then
		print("fileSave Inventory")
		save()
	end

	if message_id == LOADITEMDATA then
		load()
	end

	if message_id == ADDITEM then
		--ID = { num, name, addNum }
		addItem(message.itemID)
	end

	if message_id == CONSUMEITEM then
		--for items such as arrows or keys that are limited in use
		--also for items that are burnt
		--ID = { num, name, addNum }
		consumeItem(message.ID)
	end

	if message_id == OPENINV then
		invopen = not invopen
		gui.set_enabled(gui.get_node("layer1"), invopen)
		print("inventory opened")
	end
end

function on_input(self, action_id, action)
	if action_id == TOUCH and invopen and action.released then
		local button = gui.get_node("weapons")

		if gui.pick_node(button, action.x, action.y) then
			inWeapons = not inWeapons
			gui.set_enabled(gui.get_node("org_weapon"), inWeapons)
		end

		if inWeapons then
			local weaponButtons = {"WOODSWORD", --[["BROADSWORD", "SPEAR", "BOW", "MUSKET", "SCYTHE", 
													"SAI", "BATON", "ASSAULTRIFLE", "ROCKETLAUNCHER", "CROSSBOW", 
													"BLUNDERBUSS", "GRENADE", "BIGHAMMER", "KNIFE", "ROCK"]]}

			for _, weaponName in ipairs(weaponButtons) do
				button = gui.get_node(weaponName)

				if gui.pick_node(button, action.x, action.y) then
					print("Before toggle: " .. tostring(weaponName) .. " equipped: " .. tostring(items[string.lower(weaponName)].equipped))
					items[string.lower(weaponName)].equipped = not items[string.lower(weaponName)].equipped
					print("After toggle: " .. tostring(weaponName) .. " equipped: " .. tostring(items[string.lower(weaponName)].equipped))
					setupInventory()
				end
			end
		end
	elseif action_id == E and action.released then
		invopen = not invopen
		gui.set_enabled(gui.get_node("layer1"), invopen)
		print("inventory opened")

		if invopen then
			if collectionTracker.is_collection_loaded(msg.url("main:/main#Level")) then
				msg.post("Level:/Player#Player", "RecievingInput")
				msg.post("main#Level", "set_time_step", { factor = 0, mode = 0 })

			elseif collectionTracker.is_collection_loaded(msg.url("main:/main#MainMap")) then
				msg.post("main#MainMap", "set_time_step", { factor = 0, mode = 0 })
				msg.post("MainMap:/PlayerMap#PlayerMap", "recievingInput")
			end
		else
			if collectionTracker.is_collection_loaded(msg.url("main:/main#Level")) then
				msg.post("Level:/Player#Player", "RecievingInput")
				msg.post("main#Level", "set_time_step", { factor = 1, mode = 1 })

			elseif collectionTracker.is_collection_loaded(msg.url("main:/main#MainMap")) then
				msg.post("main#MainMap", "set_time_step", { factor = 1, mode = 1 })
				msg.post("MainMap:/PlayerMap#PlayerMap", "recievingInput")
			end
		end
	end
end