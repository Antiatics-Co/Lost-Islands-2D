


local inDungeon = false

function init(self)
	msg.post(".", "acquire_input_focus")
	gui.set_enabled(gui.get_node("main"), true)
	
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not neede
	--msg.post(receiver, message_id)
end

local function save() --Temporarily sending default values for testing purposes, change to be correct when implementing complete load

	----------------------------Setting defaults for testing --------------------------------
	
	------------------------------------Dungeons

	local fireDungeon = { doors = { 0 }, chestsOpened = {}, bossBeaten = false }
	local waterDungeon = { doors = { 0 }, chestsOpened = {}, bossBeaten = false }
	local stoneDungeon = { doors = { 0 }, chestsOpened = {}, bossBeaten = false }

	local dungeonStatus = { fireDungeon, waterDungeon, stoneDungeon, statusVersion = 1 }

	-------------------------------------Location, Energy, and Health Data

	local location = "Default"
	local position = vmath.vector3(0, 0, 0)
	local energy = 100
	local health = 100


	local easyTable = { location, position, energy, health, version = 1 }

	-----------------------------------------------------------------------------
	
	msg.post("menu#PauseMenu", "playerReady", { playerData =  easyTable})
	msg.post("menu#PauseMenu", "dungeonsReady", { dungeonsData =  dungeonStatus})

	print("Save Data Posted From Main")
	
end

function on_message(self, message_id, message, sender)

	if message_id == hash("fileSave") then
		print("fileSave MainMenu")
		save()
	end

	if message_id == hash("istrue") then
		gui.set_enabled(gui.get_node("main"), true)
		msg.post("#Level", "disable")
		msg.post("#Level", "unload")
		inDungeon = false
	end

	if message_id == hash("fileCorruption") then
		gui.set_enabled(gui.get_node("corruptFile"), true)
	end

	if message_id == hash("enable") then
		gui.set_enabled(gui.get_node("main"), true)
	end
end

function animation(node, newAnimation)
	gui.play_flipbook(node, newAnimation) -- Extend time on animation
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.released and inDungeon == false then
		local start = gui.get_node("start")

		if gui.pick_node(start, action.x, action.y) then
			animation(start, "button") -- TO DO: Extend time on animation
			inDungeon = true
			gui.set_enabled(gui.get_node("main"), false)
			
			msg.post("menu#PauseMenu", "start")
			msg.post("#Level", "load")
			msg.post("#Level", "enable")
			msg.post("#music", "stopAll")
		end

		local settings = gui.get_node("settingsButton")
		if gui.pick_node(settings, action.x, action.y) then
			animation(settings, "button")
			msg.post("#Settings", "enable")
			msg.post("#Settings", "fromMain")
			gui.set_enabled(gui.get_node("main"), false)
		end

		local quit = gui.get_node("quitGame")
		if gui.pick_node(quit, action.x, action.y) then
			os.exit()
		end

		local reset = gui.get_node("reset")
		if gui.pick_node(reset, action.x, action.y) then
			msg.post("IO#IO", "reset")
			print("reset posted")
			gui.set_enabled(gui.get_node("corruptFile"), false)
		end
		
		local keep = gui.get_node("keep")
		if gui.pick_node(keep, action.x, action.y) then
			os.exit()
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
