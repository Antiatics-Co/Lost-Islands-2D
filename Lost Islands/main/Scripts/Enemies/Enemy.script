local astar = require("main.Scripts.Modules.Pathfinder")
local playerPosition = require("main.Scripts.Modules.PlayerPosition")
local cellSize = 16

local function size_cell()
	return cellSize
end

local function set_grid()
	return {
		-- Grid for test main map
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
	}
end

local initChecker = false
local atGoal = false
local current_path = nil
local current_target_index = 1
local last_goal_pos = vmath.vector3()
local last_position = vmath.vector3()

local function enemy_init()
	astar.setCellSize(size_cell())
	astar.setgrid(set_grid())
	initChecker = true
	print("pathfinding initiated")
end

local function move_enemy(dt)
	if not current_path or current_target_index > #current_path then
		return
	end

	local start_pos = go.get_world_position()
	local target_node = current_path[current_target_index]
	local target_pos = vmath.vector3(target_node.x * cellSize + cellSize / 2, target_node.y * cellSize + cellSize / 2, start_pos.z)

	local direction = vmath.normalize(target_pos - start_pos)
	local speed = 100  -- Speed of the enemy movement --------------------------------------------------

	if vmath.length(target_pos - start_pos) > speed * dt then
		go.set_position(start_pos + direction * speed * dt)
	else
		go.set_position(target_pos)
		current_target_index = current_target_index + 1
		if current_target_index > #current_path then
			atGoal = true
			print("goal reached")
		end
	end

	last_position = go.get_world_position()
end

function update(self, dt)
	if initChecker then
		local goal_pos = playerPosition.getPosition()
		local current_pos = go.get_world_position()

		-- Check if the goal position has changed or the enemy has moved since the last path calculation
		if not current_path or (goal_pos.x ~= last_goal_pos.x or goal_pos.y ~= last_goal_pos.y) or (current_pos.x ~= last_position.x or current_pos.y ~= last_position.y) then
			print("Recalculating path")
			current_path = astar.solve(go.get_world_position(), goal_pos)
			last_goal_pos = goal_pos
			atGoal = false
			if not current_path then
				print("no path found")
				atGoal = true
			end
		end

		if not atGoal then
			move_enemy(dt)
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("init_enemy") then
		enemy_init()
	end
end
