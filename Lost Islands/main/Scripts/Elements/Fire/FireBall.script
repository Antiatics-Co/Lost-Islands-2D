local startpos = require("main.Scripts.Modules.PlayerPosition")
local duration = 1
local speed = 100

local function normalize_vector(vec)
	local length = vmath.length(vec)
	if length > 0 then
		return vec / length
	else
		return vmath.vector3(0, 0, 0) -- Handle zero-length vectors
	end
end

function init(self)
	self.object_pos = startpos.getPosition()
	local screen_mouse_pos = startpos.getMousePosition()
	local world_mouse_pos = startpos.screen_to_world(screen_mouse_pos)

	self.dir_to_mouse = world_mouse_pos - self.object_pos
	self.dir_to_mouse = normalize_vector(self.dir_to_mouse)
	self.elapsed_time = 0

	print("Object Position: ", self.object_pos)
	print("Mouse Position: ", screen_mouse_pos)
	print("World Mouse Position: ", world_mouse_pos)
	print("Initial direction to mouse: ", self.dir_to_mouse)

	self.timer_handle = timer.delay(duration, false, function()
		print("Timer triggered for deletion")
		go.delete()
	end)
end

function on_message(self, message_id, message)
	if message_id == hash("trigger_response") and message.enter then
		print("Deleting due to trigger_response")
		timer.cancel(self.timer_handle)
		go.delete()
	end
end

function fixed_update(self, dt)
	self.dir_to_mouse.z = 0 -- Ensure it's in 2D

	-- Normalize direction vector
	self.dir_to_mouse = normalize_vector(self.dir_to_mouse)

	-- Calculate new position
	local new_pos = go.get_position() + self.dir_to_mouse * speed * dt
	print("New Position: ", new_pos)

	-- Update the object's position
	go.set_position(new_pos)

	-- Check elapsed time
	self.elapsed_time = self.elapsed_time + dt
	if self.elapsed_time >= duration then
		go.delete()
	end
end




--[[
function fixed_update(self, dt)
	dir_to_mouse.z = 0 -- Ensure it's in 2D
	dir_to_mouse = normalize_vector(dir_to_mouse) -- Normalize to get a unit vector

	print("dir_to_mouse: ", dir_to_mouse)
	local end_pos = object_pos + dir_to_mouse * speed * dt -- Move to the new position
	
	elapsed_time = elapsed_time + dt
	local t = elapsed_time / duration
	local new_pos = vmath.lerp(t , object_pos, end_pos)
	go.set_position(new_pos)

							 |
----------------commented ou \/														    *************************************
	local current_pos = go.get_position()												*		  Original animator			*
	while current_pos.x < new_pos.x or current_pos.y < new_pos.y do						*************************************
		if current_pos.y < new_pos.y then
			go.set_position(vmath.vector3(current_pos.x, (current_pos.y + 5), 0))
		elseif current_pos.x < new_pos.x then
			go.set_position(vmath.vector3((current_pos.x + 100), current_pos.y, 0))
		end
	end

end]]--