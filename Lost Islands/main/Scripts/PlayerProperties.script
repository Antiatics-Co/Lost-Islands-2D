
local BURN = hash("burn")
local GETEQUIPPED = hash("sendEquipped")
local DISABLEENERGY = hash("disableEnergy")
local UNEQUIP = hash("unequip")
local CALCDAMAGE = hash("sendDamage")
local SHIELDUP = hash("shield")
local USEHEALTH
local USEENERGY


local MAXHEALTH = 100
local MINHEALTH = 1

local health
local equipped = {}
local shieldUp = false


local function isItemEquipped(equipped, itemName)
		if equipped and itemName then
			return equipped[itemName] ~= nil
		end
		return false
	end

--the get properties function will be called from setup
local function getWeaponProperties(items) --ID =  num 
	--deals with sidearms, mainarms, and elements
end

local function getShieldProperties(items) --ID = { name, type }
	if isItemEquipped(equipped, "woodShield") then
		return(.10)

	elseif isItemEquipped(equipped, "steelShield") then
		return

	elseif isItemEquipped(equipped, "magicShield") then
		
		return
		
	else
		return(0)
	end
end

local function getArmourProperties(items) --ID =  num 

end


local function getDamage(damage)
	local defencePercent = 0
	--defencePercent = getArmourProperties(equipped)
	
	defencePercent = defencePercent + getShieldProperties(equipped)

	if defencePercent == 0 then
		defencePercent  = 1
	end
	
	damage = damage * defencePercent

	return(damage)
end

local function setHealth(damage)
	damage = getDamage(damage)
	health = health - damage
	print(damage)
	print(health)
	if health < MINHEALTH then
		print("dead")
		--msg.post("main:/menu#Death", "enable")
	else

		msg.post("main#MainMenu", "health", { data = health })
	end
end

local function setEnergy()

end

function init(self)
	health = MAXHEALTH
	
end

function on_message(self, message_id, message, sender)
	if message_id == GETEQUIPPED then

		equipped[message.item.name] = message.item
		print("equipped test 1: " .. message.item.name)
		print("equipped test 2: " .. equipped[message.item.name].name)

		setHealth(100)
	end

	if message_id == UNEQUIP then
		equipped.remove(message.item)
	end

	if message_id == CALCDAMAGE then
		setHealth(message.damage)
	end

	if message_id == SHIELDUP then
		shieldUp = true
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end


