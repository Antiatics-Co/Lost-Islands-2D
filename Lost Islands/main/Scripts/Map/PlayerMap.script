--[[
@Title - Player script for the main map and towns
@Author - Aidan Cox
@Version - 3 11/22/2024
@Description - handles inputs and messages involving the player on the map
]]--

local BASEVELOCITY = 150
local recievingInputs = true

local CONTACT_POINT_RESPONSE = hash("contact_point_response")
local RECIEVINGINPUT = hash("recievingInput")
local BORDER = hash("Border")
local DUNGEON = hash("Dungeon")

local UP = hash ("up")
local DOWN = hash("down")
local LEFT = hash("left")
local RIGHT = hash("right")
local TOUCH = hash("touch")
local ESC = hash("esc")
local INITPLAYERTRACKING = hash("init_player")

local po = require("main.Scripts.Modules.PlayerPosition")

local trackingPlayer = false


function init(self)
	po.setPosition(go.get_position())
	msg.post("#","acquire_input_focus")
	msg.post("@render:", "use_camera_projection")
	camera.acquire_focus("Operator#camera")
	self.correction = vmath.vector3(0, 0, 0)
	self.vel = vmath.vector3(0, 0, 0) -- Initialize velocity
end

local function flip(direction)
	sprite.set_hflip("#sprite", direction < 0) --flips sprite horizontally, first file, 2nd true false if they Should be flipped
end

local function play_animation(self, newAnimation)
	if self.animation ~= newAnimation then
		sprite.play_flipbook("#sprite", newAnimation) --first is file that controls it, second is name of animation
		self.animation = newAnimation
	end
end

local function animate(self)
	if self.groundContact then
		if self.velocity == 0 then
			play_animation(self, "IdleMap")
		else 
			play_animation(self, "IdleMap") --idle is stand in for movement animation
		end
	else
		play_animation(self, "IdleMap") -- idle is stand in for jumping animation
	end
end


function update(self, dt)
	local pos = go.get_position() -- Get current position
	pos = pos + self.vel * dt -- Update position based on velocity
	go.set_position(pos) -- Set new position
	self.vel.x = 0 -- Reset velocity
	self.vel.y = 0
	--reset correction
	self.correction = vmath.vector3()
	if trackingPlayer then
		po.setPosition(pos)
	end
end

local function handleLevelCollisions(self, normal, distance)
	if normal == nil then
		print("Error: normal is nil")
		return
	end

	print("Collision Normal:", normal)
	print("Collision Distance:", distance)

	-- Get the info needed to move out of collision. We might
	-- get several contact points back and have to calculate
	-- how to move out of all of them by accumulating a
	-- correction vector for this frame:
	if distance > 0 then
		-- First, project the accumulated correction onto
		-- the penetration vector
		local proj = vmath.project(self.correction, normal * distance)
		print("Projection:", proj)
		if proj < 1 then
			-- Only care for projections that does not overshoot.
			local comp = (distance - distance * proj) * normal
			-- Apply compensation
			print("Compensation:", comp)
			go.set_position(go.get_position() + comp)
			-- Accumulate correction done
			self.correction = self.correction + comp
			print("Accumulated Correction:", self.correction)
		end
	end
end

function on_message(self, message_id, message, sender)
	
	if message_id == CONTACT_POINT_RESPONSE then
		if message.group == BORDER then
			handleLevelCollisions(self, message.normal, message.distance)
		end

		if message.group == DUNGEON then
			msg.post("main:/menu#PauseMenu", "save")
			msg.post("main:/main#music", "stopAll")

			msg.post("main:/main#MainMenu", "enterDungeon")
		end
	end

	if message_id == RECIEVINGINPUT then
		recievingInputs = not recievingInputs
		print("inputs")
	end
	
	if message_id == INITPLAYERTRACKING then
		trackingPlayer = true
		if message.incrementer == 1 and po.getPosition() ~= nil then
			go.set_position(po.getPosition())
		end
	end
end

function on_input(self, action_id, action)
	if recievingInputs then
		if action_id == UP then
			self.vel.y = BASEVELOCITY -- Move up
		elseif action_id == DOWN then
			self.vel.y = -BASEVELOCITY -- Move down
		elseif action_id == LEFT then
			self.vel.x = -BASEVELOCITY -- Move left
		elseif action_id == RIGHT then
			self.vel.x = BASEVELOCITY -- Move right
		elseif action_id == TOUCH and action.pressed then
			po.setMousePosition(vmath.vector3(action.x, action.y, 0))
			factory.create("#factory")
		elseif action_id == ESC and action.released then
			msg.post("main:/menu#PauseMenu", "enable")
		end
	end
end
