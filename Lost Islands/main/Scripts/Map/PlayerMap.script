--[[
@Title - Player script for the main map and towns
@Author - Aidan Cox
@Version - 1
@Description - handles inputs and messages involving the player on the map
]]--

local BASEVELOCITY = 150
local recievingInputs = false


function init(self)
	msg.post(".","acquire_input_focus")
	msg.post("@render", "use_camera_projection")
	camera.acquire_focus("operatorMap#cameramap")
	self.vel = vmath.vector3() -- Initialize velocity
end


local function flip(direction)
	sprite.set_hflip("#sprite", direction < 0) --flips sprite horizontally, first file, 2nd true false if they Should be flipped
end

local function play_animation(self, newAnimation)
	if self.animation ~= newAnimation then
		sprite.play_flipbook("#sprite", newAnimation) --first is file that controls it, second is name of animation
		self.animation = newAnimation
	end
end

local function animate(self)
	if self.groundContact then
		if self.velocity == 0 then
			play_animation(self, "IdleMap")
		else 
			play_animation(self, "IdleMap") --idle is stand in for movement animation
		end
	else
		play_animation(self, "IdleMap") -- idle is stand in for jumping animation
	end
end


function update(self, dt)
	local pos = go.get_position() -- Get current position
	pos = pos + self.vel * dt -- Update position based on velocity
	go.set_position(pos) -- Set new position
	self.vel.x = 0 -- Reset velocity
	self.vel.y = 0
end

function on_input(self, action_id, action)
	if action_id == hash("up") then
		self.vel.y = BASEVELOCITY -- Move up
	elseif action_id == hash("down") then
		self.vel.y = -BASEVELOCITY -- Move down
	elseif action_id == hash("left") then
		self.vel.x = -BASEVELOCITY -- Move left
	elseif action_id == hash("right") then
		self.vel.x = BASEVELOCITY -- Move right
	elseif action_id == hash("esc") and action.released then
		msg.post("menu#PauseMenu", "enable")
	end
end

-- not causing gravity to player charavter on map
local function handleLevelCollisions(self, normal, distance)

	print("Collision Normal:", normal)

	distance = distance * vmath.length(normal) --normal dist compensation

	if distance > 0 then
		--project accumulated correction onto the penetration vector
		local projection = vmath.project(self.correction, normal * distance)
		if projection < 1 then
			local compensation = (distance - distance * projection) * normal
			go.set_position(go.get_position() + compensation) -- apply compensation
			self.correction = self.correction + compensation
		end
	end

	local normalLength = vmath.length(normal)

	if normalLength > 0 then
		self.vel.x = 0
	end

	if math.abs(normal.x) > 0 then
		self.vel.x = 0
	end
end


function on_message(self, message_id, message, sender)

	if message_id == hash("startRecievingInput") then
		recievingInputs = true
		print("restarting inputs")
	end

	if message_id == hash("stopRecievingInput") then
		recievingInputs = false --this isn't connecting properlt eith itself in this script
		print("Stopping all inputs")
	end
end
