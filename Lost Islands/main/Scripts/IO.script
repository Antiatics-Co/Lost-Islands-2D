--@Title Input Ouput
--@Author Aidan Cox
--@_VERSION = 2
--@Description
--	This script handles the saving to and loading from files
-- has a checksum to verify integrity of files


local defsave = require("defsave.defsave")
local md5 = require("main.Scripts.Checksum.md5")

local filename = "Default"
local configName = "config.save"

local location = "Default"
local position = vmath.vector3(0, 0, 0)
local items = { 0, 0, 0}
local elements = 1
local health = 100

local easyTable = { location, position, items, elements, health }

local resolution = 1 --just going to have multiple options and give a number depending upon the option
local volume = 100

local config = { resolution, volume }

function generate_checksum(data)
	return md5.sumhexa(data)
end

function file_exists(filepath)
	filepath = "C:\\Users\\aidco\\AppData\\Roaming\\LostIslands\\" .. filename
	local file = io.open(filepath, "r")
	if file then
		io.close(file)
		return true
	else
		return false
	end
end

function table_to_string(tbl)
	local result = ""
	for k, v in pairs(tbl) do
		result = result .. tostring(k) .. value_to_string(v)
	end
	return result
end

function value_to_string(value)
	if type(value) == "table" then
		return table_to_string(value)
	elseif type(value) == "userdata" and vmath.vector3 and vmath.vector3(value) then
		return tostring(value.x) .. tostring(value.y) .. tostring(value.z)
	else
		return tostring(value)
	end
end

function init(self)
	defsave.appname = "LostIslands"
	print("Type of vmath.vector3:", type(vmath.vector3))

	filename = filename .. ".dat"
	
	defsave.load(filename)

	if file_exists(filename) then
		local loadedChecksum = defsave.get(filename, "checksum")
		local loadedData = defsave.get(filename, "default")
		print("Loaded Data: ", loadedData)
		print("Loaded Checksum: ", loadedChecksum)

		-- Verify the checksum
		if loadedData then
			local current_checksum = generate_checksum(table_to_string(loadedData))
			print("Current Checksum: ", current_checksum)
			if current_checksum == loadedChecksum then
				print("Data integrity verified.")
			else
				print("Data integrity check failed.")
			end
		else
			print("No saved data found.")
		end
	else
		print("No save file found.")
		local checksum = generate_checksum(table_to_string(easyTable))
		print("Initial Checksum: ", checksum)
		
		defsave.set(filename, "default", easyTable)
		defsave.set(filename, "checksum", checksum)
	end

	defsave.load(configName)

	if file_exists(configName) then
		config = defsave.get(configName, "default")
	
	else
		defsave.set(configName, "default", config)
	end
	
	defsave.save(filename)
	defsave.save(configName)

	print("Save file created and data saved.")
end


function on_message(self, message_id, message, sender)
if message_id == "save" then
	easyTable = message.save
	save()
end

if message_id == "load" then
	easyTable = defsave.get(filename, "data")

	local loadedChecksum = defsave.get(filename, "checksum")
	print("Loaded Checksum: ", loadedChecksum)

	-- Verify the checksum
	if easyTable then
		local current_checksum = generate_checksum(table_to_string(easyTable))
		print("Current Checksum: ", current_checksum)
		if current_checksum == loadedChecksum then
			print("Data integrity verified.")
		else
			print("Data integrity check failed.")
		end
	else
		print("No saved data found.")
	end
end
end

function save()
print("Easy Table", easyTable)

local new_checksum = generate_checksum(table_to_string(easyTable))
print("New Checksum: ", new_checksum)
defsave.set(filename, "checksum", new_checksum)
defsave.set(filename, "data", easyTable)
defsave.save(filename)
print("Data saved successfully.")
end