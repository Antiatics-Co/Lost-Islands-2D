

--PreHashing for better preformance
local FILECORRUPTION = hash("fileCorruption")
local TOMAINMENU = hash( "ToMain")
local HEALTH = hash("health")
local ENABLE = hash("enable")
----------------------------------------------------

local inDungeon = false
local easyTable = {}
local health = 100

local function delaySplash()
	local minTime = 2
	msg.post("#splash", "on")
	
	timer.delay(minTime, false, function()
		msg.post("#splash", "on")
		msg.post("#music", "enterMain")
		return
	end)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	delaySplash()
	gui.set_enabled(gui.get_node("main"), true)
end

function on_message(self, message_id, message, sender)

	if message_id == TOMAINMENU then
		gui.set_enabled(gui.get_node("main"), true)
		
		msg.post("Inventory#Inventory", "start")
		msg.post("#Map", "disable")
		msg.post("#Map", "unload")

		inDungeon = false
	end

	if message_id == HEALTH then
		easyTable.health = message.data
		msg.post("hud#hud", "setHealth", { health = easyTable.health })
	end

	if message_id == FILECORRUPTION then
		gui.set_enabled(gui.get_node("corruptFile"), true)
	end

	if message_id == ENABLE then
		gui.set_enabled(gui.get_node("main"), true)
		inDungeon = true
	end
end

function animation(node, newAnimation)
	gui.play_flipbook(node, newAnimation) -- Extend time on animation
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.released and inDungeon == false then
		local start = gui.get_node("start")

		if gui.pick_node(start, action.x, action.y) then
			animation(start, "button") -- TO DO: Extend time on animation
			inDungeon = true
			gui.set_enabled(gui.get_node("main"), false)


			msg.post("#music", "stopAll")
			msg.post("character#CharacterCreator", "toggle")
		end

		local settings = gui.get_node("settingsButton")
		if gui.pick_node(settings, action.x, action.y) then
			animation(settings, "button")
			msg.post("#Settings", "enable")
			msg.post("#Settings", "fromMain")
			gui.set_enabled(gui.get_node("main"), false)
			inDungeon = true
		end

		local quit = gui.get_node("quitGame")
		if gui.pick_node(quit, action.x, action.y) then
			os.exit()
		end

		local reset = gui.get_node("reset")
		if gui.pick_node(reset, action.x, action.y) then
			msg.post("IO#IO", "reset")
			print("reset posted")
			gui.set_enabled(gui.get_node("corruptFile"), false)
		end
		
		local keep = gui.get_node("keep")
		if gui.pick_node(keep, action.x, action.y) then
			os.exit()
		end
	end
end