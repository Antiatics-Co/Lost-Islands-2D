

--PreHashing for better preformance
local FILECORRUPTION = hash("fileCorruption")
local TOMAINMENU = hash( "ToMain")
local HEALTH = hash("health")
local ENABLE = hash("enable")

----------------------------------------------------

local col = require("Modules.CollectionTracker")


local inDungeon = false
local easyTable = {}
local fileExists = true
local menuMusic = true
local alert = false
local saves = false

local function delaySplash()
	local minTime = 2
	msg.post("#splash", "on")
	
	timer.delay(minTime, false, function()
		msg.post("#splash", "on")
		if menuMusic then
			msg.post("#music", "enterMain")
		end
		return
	end)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	delaySplash()
	gui.set_enabled(gui.get_node("main"), true)
end

function on_message(self, message_id, message, sender)

	if message_id == TOMAINMENU then
		gui.set_enabled(gui.get_node("main"), true)
		
		msg.post("Inventory#Inventory", "start")
		msg.post("#Map", "disable")
		msg.post("#Map", "unload")

		inDungeon = false
	end

	if message_id == hash("file") then
		fileExists = message.file
		gui.set_texture(gui.get_node("resume"), "Game", { key = "button" }) -- to be editted
	end

	if message_id == hash("boot") then
		boot()
	end

	if message_id == hash("noFile") then
		noFile()
	end

	if message_id == HEALTH then
		easyTable.health = message.data
		msg.post("hud#hud", "setHealth", { health = easyTable.health })
	end

	if message_id == FILECORRUPTION then
		gui.set_enabled(gui.get_node("corruptFile"), true)
		noFile()
	end

	if message_id == ENABLE then
		gui.set_enabled(gui.get_node("main"), true)
		col.resume = false
		inDungeon = false
	end
end

function SetSaveSlot(num, tog, name)
	if tog then
		gui.set_text("saveText"..num, name)
	end
end

function noFile()
	fileExists = false
	gui.set_color(gui.get_node("resume"), vmath.vector4(0, 1, 0, 1))
end

function animation(node, newAnimation)
	gui.play_flipbook(node, newAnimation) -- Extend time on animation
end

function boot()
	inDungeon = true
	gui.set_enabled(gui.get_node("main"), false)

	menuMusic = false
	msg.post("character#CharacterCreator", "toggle")
end

local function newGame()
	inDungeon = true
	gui.set_enabled(gui.get_node("main"), false)
	msg.post("#music", "stopAll")
	msg.post("IO#IO", "reset")
	msg.post("character#CharacterCreator", "toggle")
end

local function newGameSwitch(ans)
	if ans then
		gui.set_enabled(gui.get_node("newGameAlert"), false)
		alert = false
		newGame()
	else
		gui.set_enabled(gui.get_node("newGameAlert"), false)
		alert = false
	end
end

function on_input(self, action_id, action)
	local node
	if inDungeon == false then
		if action_id == hash("touch") and action.released then
			
			node = gui.get_node("start")

			if gui.pick_node(node, action.x, action.y) then
				animation(node, "button") -- TO DO: Extend time on animation

				if fileExists then
					gui.set_enabled(gui.get_node("newGameAlert"), true)
					alert = true
				else
					newGame()
				end
			end

			node = gui.get_node("resume")
			if gui.pick_node(node, action.x, action.y) and fileExists then
				animation(node, "button") -- TO DO: Extend time on animation
				inDungeon = true
				gui.set_enabled(gui.get_node("main"), false)
																	--todo
				msg.post("#music", "stopAll")

				col.resume = true
				
				msg.post("main#Map", "load")
				msg.post("main#Map", "enable")
			end

			node = gui.get_node("settingsButton")
			if gui.pick_node(node, action.x, action.y) then
				animation(node, "button")
				msg.post("#Settings", "enable")
				msg.post("#Settings", "fromMain")
				gui.set_enabled(gui.get_node("main"), false)
				inDungeon = true
			end

			node = gui.get_node("quitGame")
			if gui.pick_node(node, action.x, action.y) then
				os.exit()
			end

			node = gui.get_node("reset")
			if gui.pick_node(node, action.x, action.y) then
				msg.post("IO#IO", "reset")
				print("reset posted")
				gui.set_enabled(gui.get_node("corruptFile"), false)
			end
			
			node = gui.get_node("keep")
			if gui.pick_node(node, action.x, action.y) then
				os.exit()
			end
		end
	end

--doing this --Planning --add comments as you go to remember how it works
-- (1) IO checks if a save file of a certain name exists 
-- (2) Updates the filename so it knows what it should be saving to 
-- (3) When saving, add filename as value to config so that it can load and be 
-- 	used to determine which file the main menu resume/continue button loads
-- 	if nil then resume won't do anything and will be greyed out or something
-- (3) fileExists is a table of bools
-- (4) for loop to set slots correcty that increments to 3 and sets which can be pressed in which menus
	
	if action_id == hash("touch") and action.released and saves then
		node = hash("save1")
		if gui.pick_node(node, action.x, action.y) then
			if fileExists[1] then
				
			end
		end

		node = hash("save2")
		if gui.pick_node(node, action.x, action.y) then
			if fileExists[2] then

			end
		end

		node = hash("save3")
		if gui.pick_node(node, action.x, action.y) then
			if fileExists[3] then

			end
		end
	end

	if action_id == hash("touch") and action.released and alert then
		node = gui.get_node("yes")

		if gui.pick_node(node, action.x, action.y) then
			newGameSwitch(true)
		end

		node = gui.get_node("no")
		if gui.pick_node(node, action.x, action.y)then
			newGameSwitch(false)
		end
	end
end