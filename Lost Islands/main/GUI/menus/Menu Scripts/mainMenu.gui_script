-- PreHashing for better performance
local FILECORRUPTION = hash("fileCorruption")
local TOMAINMENU = hash("ToMain")
local HEALTH = hash("health")
local ENABLE = hash("enable")

----------------------------------------------------

local FILENAME = "save"

local col = require("Modules.Settings")

local inDungeon = false
local easyTable = {}
local fileExists = {}
local menuMusic = true
local alert = false
local saves = false
local loading = false

-- Function: Delay Splash Screen
local function delaySplash()
	local minTime = 2
	msg.post("#splash", "on")

	timer.delay(minTime, false, function()
		msg.post("#splash", "on")
		if menuMusic then
			msg.post("#music", "enterMain")
		end
		return
	end)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	delaySplash()
	gui.set_enabled(gui.get_node("main"), true)
end

-- Handling Messages
function on_message(self, message_id, message, sender)
	if message_id == TOMAINMENU then
		gui.set_enabled(gui.get_node("main"), true)
		msg.post("Inventory#Inventory", "start")
		msg.post("#Map", "disable")
		msg.post("#Map", "unload")
		inDungeon = false
	end

	if message_id == hash("file") then
		print(message.name)
		print(message.file)
		fileExists[message.file] = message.name

		if message.file == 3 then
			SetSaveSlot()
		end
	end

	if message_id == hash("boot") then
		boot()
	end

	if message_id == hash("noFile") then
		noFile(message.file)
	end

	if message_id == HEALTH then
		easyTable.health = message.data
		msg.post("hud#hud", "setHealth", { health = easyTable.health })
	end

	if message_id == FILECORRUPTION then
		gui.set_enabled(gui.get_node("corruptFile"), true)
		noFile()
	end

	if message_id == ENABLE then
		gui.set_enabled(gui.get_node("main"), true)
		inDungeon = false
	end
end

-- Set Save Slot Function
function SetSaveSlot()
	for i = 1, 3, 1 do 
		if fileExists[i] ~= nil then
			print(i)
			gui.set_text(gui.get_node("saveText" .. i), fileExists[i])
		else
			print(i)
			gui.set_text(gui.get_node("saveText" .. i), "No File")
		end
	end
end

-- Handle Missing Files
function noFile(i)
	fileExists[i] = nil
	gui.set_color(gui.get_node("resume"), vmath.vector4(0, 1, 0, 1))
end

-- Play Animation
function animation(node, newAnimation)
	gui.play_flipbook(node, newAnimation)
end

-- Boot Function
function boot()
	inDungeon = true
	gui.set_enabled(gui.get_node("main"), false)
	menuMusic = false
	msg.post("character#CharacterCreator", "toggle")
end

-- New Game Setup
local function newGame()
	inDungeon = true
	gui.set_enabled(gui.get_node("main"), false)
	gui.set_enabled(gui.get_node("loadMenu"), false)
	msg.post("#music", "stopAll")
	msg.post("IO#IO", "reset")
	msg.post("character#CharacterCreator", "toggle")
end

local function newGameSwitch(ans)
	if ans then
		gui.set_enabled(gui.get_node("newGameAlert"), false)
		alert = false
		newGame()
	else
		gui.set_enabled(gui.get_node("newGameAlert"), false)
		alert = false
	end
end

local function load(i)
	col.filename = FILENAME .. i..".dat"
	col.resume = col.filename
	inDungeon = true
	gui.set_enabled(gui.get_node("main"), false)
	gui.set_enabled(gui.get_node("loadMenu"), false)
	msg.post("#music", "stopAll")
	msg.post("main#Map", "load")
	msg.post("main#Map", "enable")
end

-- Handling User Input
function on_input(self, action_id, action)
	local node

	if action_id == hash("touch") and action.released and inDungeon == false then
		if saves == false then
			-- Start Game Button
			node = gui.get_node("start")
			if gui.pick_node(node, action.x, action.y) then
				saves = true
				animation(node, "button")
				gui.set_enabled(gui.get_node("loadMenu"), true)
			end

			-- Resume Button
			node = gui.get_node("resume")
			if gui.pick_node(node, action.x, action.y) and col.resume ~= nil then
				animation(node, "button")
				col.filename = col.resume
				inDungeon = true
				gui.set_enabled(gui.get_node("main"), false)
				msg.post("#music", "stopAll")
				msg.post("main#Map", "load")
				msg.post("main#Map", "enable")
			end

			-- Settings Button
			node = gui.get_node("settingsButton")
			if gui.pick_node(node, action.x, action.y) then
				animation(node, "button")
				msg.post("#Settings", "enable")
				msg.post("#Settings", "fromMain")
				gui.set_enabled(gui.get_node("main"), false)
				inDungeon = true
			end

			-- Load Game Button
			node = gui.get_node("load")
			if gui.pick_node(node, action.x, action.y) and fileExists ~= nil then
				gui.set_enabled(gui.get_node("loadMenu"), true)
				loading = true
				saves = true
			end

			-- Quit Game Button
			node = gui.get_node("quitGame")
			if gui.pick_node(node, action.x, action.y) then
				os.exit()
			end

			-- Reset Button
			node = gui.get_node("reset")
			if gui.pick_node(node, action.x, action.y) then
				msg.post("IO#IO", "reset")
				print("reset posted")
				gui.set_enabled(gui.get_node("corruptFile"), false)
			end

			-- Keep Current File Button
			node = gui.get_node("keep")
			if gui.pick_node(node, action.x, action.y) then
				gui.set_enabled(gui.get_node("corruptFile"), false)
			end
		elseif saves == true and fileExists ~= nil then
			-- Save Slot 1
			node = gui.get_node("save1")
			if gui.pick_node(node, action.x, action.y) and loading == false then
				if fileExists[1] ~= nil then
					col.filename = FILENAME .. "1.dat"
					gui.set_enabled(gui.get_node("newGameAlert"), true)
					alert = true
				else
					col.filename = FILENAME .. "1.dat"
					newGame()
				end
			elseif gui.pick_node(node, action.x, action.y) and loading == true then
				load(1)
			end

			-- Save Slot 2
			node = gui.get_node("save2")
			if gui.pick_node(node, action.x, action.y) and loading == false then
				if fileExists[2] ~= nil then
					col.filename = FILENAME .. "2.dat"
					gui.set_enabled(gui.get_node("newGameAlert"), true)
					alert = true
				else
					col.filename = FILENAME .. "2.dat"
					newGame()
				end
			elseif gui.pick_node(node, action.x, action.y) and loading == true then
				load(2)
			end

			-- Save Slot 3
			node = gui.get_node("save3")
			if gui.pick_node(node, action.x, action.y) and loading == false then
				if fileExists[3] ~= nil then
					col.filename = FILENAME .. "3.dat"
					gui.set_enabled(gui.get_node("newGameAlert"), true)
					alert = true
				else
					col.filename = FILENAME .. "3.dat"
					newGame()
				end
			elseif gui.pick_node(node, action.x, action.y) and loading == true then
				load(3)
			end

			-- New Game Alert Confirmation
			if action_id == hash("touch") and action.released and alert then
				node = gui.get_node("yes")
				if gui.pick_node(node, action.x, action.y) then
					newGameSwitch(true)
				end

				node = gui.get_node("no")
				if gui.pick_node(node, action.x, action.y) then
					newGameSwitch(false)
				end
			end
		end
	end
end