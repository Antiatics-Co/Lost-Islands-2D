--@Versiom June 22 2024
--@Author Aidan Cox
--@Description - Adjusts settings *** Currently only volume ***


local leave = ""
local volume = 50
local resolution = 1
local config = { volume = volume, resolution = resolution }
local transitioning = false  -- Flag to prevent multiple transitions
local settingsOpen = false
local timerId = nil
local hold_duration = 0.25 --seconds
local press_start_time = nil

function init(self)
	gui.set_enabled(gui.get_node("settings"), false)
	gui.set_text(gui.get_node("SetVolume"), volume)
	print("Defaults loaded")
	msg.post("IO#IO", "configLoad")
end

function on_message(self, message_id, message, sender)
	print("Received message: ", message_id)

	if message_id == hash("loadedConfig") then
		local newConfig = message.data
			config = newConfig
			volume = config.volume or volume
			resolution = config.resolution or resolution
			msg.post("#MainMenu", "prevFile", { file = config.prevsave })
			gui.set_text(gui.get_node("SetVolume"), volume)
			sound.set_group_gain("master", (volume / 100))
			print("Configuration updated from message")
	end

	if message_id == hash("enable") then
		gui.set_enabled(gui.get_node("settings"), true)
		transitioning = false  -- Reset the flag when settings menu is enabled
	end

	if message_id == hash("fromPause") then
		leave = "menu#PauseMenu"
		print("From Pause Successfully sent, leave = ", leave)
		settingsOpen = not settingsOpen
	end

	if message_id == hash("fromMain") then
		leave = "#MainMenu"
		print("From Main Successfully sent, leave = ", leave)
		settingsOpen = not settingsOpen
	end
end

local function animation(node, newAnimation)
	gui.play_flipbook(node, newAnimation) -- Extend time on animation
end

local function changeVolume(mod)
	timerId = timer.delay(0.1, true, function()
		
		volume = volume + mod
		if volume  < 1 then
			volume = 0
		elseif volume  > 99 then
			volume = 100
		end
		gui.set_text(gui.get_node("SetVolume"), volume)
		sound.set_group_gain("master", (volume / 100))
		gui.set_text(gui.get_node("SetVolume"), volume)
	end)
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and settingsOpen then
		local plus = gui.get_node("plus")

		if gui.pick_node(plus, action.x, action.y)then
			if action.pressed then
				animation(plus, "plus")
				press_start_time = socket.gettime()
				timerId = timer.delay(hold_duration, false, function()
					changeVolume(1)
			end)
			elseif action.released then
				local press_duration = socket.gettime() - press_start_time
				if press_duration < hold_duration then
					
					animation(plus, "plus")
					if volume  > 99 then
						volume = 100
					end
					
					volume = volume + 1
					gui.set_text(gui.get_node("SetVolume"), volume)
					sound.set_group_gain("master", (volume / 100))
				end
				
				if timerId then
					timer.cancel(timerId)
					timerId = nil
				end
			end
		end

		local minus = gui.get_node("minus")
		if gui.pick_node(minus, action.x, action.y) then
			if action.pressed then
				press_start_time = socket.gettime()
				timerId = timer.delay(hold_duration, false, function()
					changeVolume(-1)
				end)
			elseif action.released then
				local press_duration = socket.gettime() - press_start_time
				if press_duration < hold_duration then
					animation(minus, "minus")
					volume = volume - 1
					if volume  < 1 then
						volume = 0
					end
					gui.set_text(gui.get_node("SetVolume"), volume)
					sound.set_group_gain("master", (volume / 100))
				end
				if timerId then
					timer.cancel(timerId)
					timerId = nil
				end
			end
		end
	end

	if action_id == hash("touch") and action.released and settingsOpen then
		local back = gui.get_node("back")
		if gui.pick_node(back, action.x, action.y) then
			settingsOpen = not settingsOpen
			
			animation(back, "button")
			leaveSettings(leave)
		end
	end
end

function leaveSettings(soLong)
	if not transitioning then
		transitioning = true  -- Set the flag to prevent multiple transitions
		config.volume = volume
		config.resolution = resolution
		config.prevsave = --Should hold the name of previous save file, to load, get from main****************************
		msg.post("IO#IO", "configSave", {config = config}) 

		print("Leaving to: ", soLong)
		gui.set_enabled(gui.get_node("settings"), false)
		msg.post(soLong, "enable")
	end
end