--@Title - Inventory
--@Author - Aidan Cox
--@Version - 4
--@Description - The Inventory system

-- these are the item numbers, for use in the inventory

---PREHASHING-------------------------------------------------

local itm = require("Modules.items")
local prop = require("Modules.ItemProperties")

local LOADITEMDATA =  hash("loadItemData")
local FILESAVE = hash("fileSave")
local ADDITEM = hash("addItem")
local CONSUMEITEM = hash("consumeItem")
local TOUCH = hash("touch")
local OPENINV = hash("openInv")
local E = hash("inventory")
local START = hash("start")
--------------------------------------------------------------

local inPlayer = true
local inWeapons = false
local inArmour = false
local inElements = false
local invopen = false
local start = false
--------------------------------------------------------------


-- Define items as a global variable
local items = {}

local layers = {
	"_org"
}


print("Items defined:", items)


local function InvItemStatus(ID)
	local node_name = items[ID.name].node
	if type(node_name) ~= "string" then
		print("Error: Invalid node name for", ID.name)
		return
	end

	local node = gui.get_node(node_name)
	if not node then
		print("Error: Node not found for", ID.name)
		return
	end

	if items[ID.name].equipped then
		print("Item Equipped:", ID.name)
		gui.set_color(node, vmath.vector4(0, 1, 0, 1)) -- Change color to green
		msg.post("Player/Equipment#equipment", "EquipEnable")
	else
		print("Item Unequipped:", ID.name)
		gui.set_color(node, vmath.vector4(1, 1, 1, 1)) -- Change color to white
		print("Attempted to set color to white for:", ID.name)
	end

	-- Confirm the color was set
	local current_color = gui.get_color(node)
	print("Current color of", ID.name, ":", current_color)
end


local function setupInventory()
	for name, item in pairs(items) do
		if type(item) == "table" and item.hasItem ~= nil then
			if item.hasItem then
				if item.equipped then
					prop.equip({ name = name, type = item.type, attack = item.attack, combo = item.combo, speed = item.speed })
				end
			end
			InvItemStatus({ name = name }) -- Ensure it gets called for all items
		end
	end
end



local function load()
	print("Loading Items Initiated")
	items = itm.get_itemList()
	setupInventory()
end

local function save()
	print("Entered save function")
	-- Check if items is defined and not nil

	if items then
		itm.set_itemList(items)
		print("Set Item List")
		msg.post("menu#PauseMenu", "itemsReady")
		print("Save Data Posted From Inventory")
	else
		print("Error: items is nil or not defined")
	end
end

local function addItem(itemNum) --itemNum = {name, num} 
	if itemNum.num > 29 and (items[itemNum.name].holding + itemNum.addNum) < items[itemNum.name].max then
		items[itemNum.name].holding = items[itemNum.name].holding + itemNum.addNum

		setupInventory()

	elseif  items[itemNum.name].hasItem == false then
		items[itemNum.name].hasItem = true

		setupInventory()		
	else
		print("Exeeds Item limit")
		return
	end
end

local function consumeItem(itemNum)
	if itemNum.num > 29  then
		items[itemNum.name].holding = items[itemNum.name].holding - itemNum.addNum

		setupInventory()

	elseif  items[itemNum.name].hasItem == true then
		items[itemNum.name].hasItem = false
		if items[itemNum.name].equipped then
			items[itemNum.name].equipped = false
			
			
		end

		setupInventory()		
	else
		print("Doesn't have item")
		return
	end
end

local function disableLayer(prefix)
	for _, node_prefix in ipairs(layers) do
		if string.sub(node_prefix, 1, string.len(prefix)) == prefix then
			local node = gui.get_node(node_prefix)
			gui.set_enabled(node, false)
		end
	end
end

local function enableLayer(prefix)
	for _, node_prefix in ipairs(layers) do
		if string.sub(node_prefix, 1, string.len(prefix)) == prefix then
			local node = gui.get_node(node_prefix)
			gui.set_enabled(node, true)
		end
	end
end


function init(self)
	msg.post(".", "acquire_input_focus")
	print("Script initialized")
	disableLayer("org_")
	--setupInventory()
	start = not start
end

function on_message(self, message_id, message, sender)
	print("Received message:", message_id)
	
	if message_id == FILESAVE then
		print("fileSave Inventory")
		save()
	end

	if message_id == LOADITEMDATA then
		load()
	end

	if message_id == ADDITEM then
		--ID = { num, name, addNum }
		addItem(message.itemID)
	end

	if message_id == CONSUMEITEM then
		--for items such as arrows or keys that are limited in use
		--also for items that are burnt
		--ID = { num, name, addNum }
		consumeItem(message.ID)
	end

	if message_id == OPENINV then
		if start then
			invopen = not invopen
			gui.set_enabled(gui.get_node("layer1"), invopen)
			print("inventory opened")
		end
	end
end

local button

local function setupAuxMenu(buttons, action_id, action)
	for _, name in ipairs(buttons) do
		button = gui.get_node(name)

		if gui.pick_node(button, action.x, action.y) then
			print("Before toggle: " .. tostring(name) .. " equipped: " .. tostring(items[string.lower(name)].equipped))
			items[string.lower(name)].equipped = not items[string.lower(name)].equipped
			print("After toggle: " .. tostring(name) .. " equipped: " .. tostring(items[string.lower(name)].equipped))
			setupInventory()
		end
	end
end

function on_input(self, action_id, action)
	if action_id == TOUCH and invopen and action.released then
		button = gui.get_node("weapons")
		local buttons

		if gui.pick_node(button, action.x, action.y) then
			inWeapons = not inWeapons
			gui.set_enabled(gui.get_node("org_weapon"), inWeapons)
		end

		if inWeapons then
			buttons = {"WOODSWORD", "BROADSWORD", "SPEAR", "BOW", "MUSKET", "SCYTHE", 
													"SAI", "BATON", "ASSAULTRIFLE", "ROCKETLAUNCHER", "CROSSBOW", 
													"BLUNDERBUSS", "GRENADE", "BIGHAMMER", "KNIFE", "ROCK" }
			setupAuxMenu(buttons, action_id, action)
		end

-------------
		
		button = gui.get_node("armour")

		if gui.pick_node(button, action.x, action.y) then
			inWeapons = not inArmour
			gui.set_enabled(gui.get_node("org_armour"), inArmour)
		end

		if inArmour then
			buttons = {}
			setupAuxMenu(buttons, action_id, action)
		end

		button = gui.get_node("elements")

		if gui.pick_node(button, action.x, action.y) then
			inWeapons = not inElements
			gui.set_enabled(gui.get_node("org_elements"), inElements)
		end

		if inElements then
			buttons = {}
			setupAuxMenu(buttons, action_id, action)
		end

		
	elseif action_id == E and action.released and start then
		invopen = not invopen
		gui.set_enabled(gui.get_node("layer1"), invopen)
		print("inventory opened")

		if invopen then  -- update to be mroe dynamic
			msg.post("main#Map", "set_time_step", { factor = 0, mode = 0 })
			msg.post("map:/Player#Player", "recievingInput")
		else
			msg.post("main#Map", "set_time_step", { factor = 1, mode = 1 })
			msg.post("map:/Player#Player", "recievingInput")
		end
	end
end